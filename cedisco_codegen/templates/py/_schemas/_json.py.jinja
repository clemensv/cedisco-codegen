1   {%- set schema_name = class_name | camel_case -%}
2   {%- set list_type = "list" %}
3   {%- set schema = root %}
4   
5   {%- macro emitclass(type, type_name) -%}
6       {%- if type.type == 'object' or not type.type %}
7       class {{ type_name | camel_case }}:
8           {%- if type.allOf -%}
9               {%- for allOfType in type.allOf -%}
10                  {%- if loop.first -%}
11                      {%- if allOfType['$ref'] -%}
12                  : {{ allOfType['$ref'] | schema_type | camel_case }}
13                      {%- endif -%}
14                  {%- endif -%}
15              {%- endfor -%}
16           {%- endif %}
17               def __init__(self):
18                   pass
19               @staticmethod
20               def from_data(data):
21                   if isinstance(data, {{ type_name | camel_case }})
22                       return data
23                   if isinstance(data, dict):
24                       return json.loads(json.dumps(data), object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))
25                   else if isinstance(data, str):
26                       return json.loads(data, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))
27                   raise TypeError("Data is not of a supported type for conversion to {{ type_name | camel_case }}")
28            {% if type.properties %}
29            {% for pn, property in type.properties.items()  -%}
30                {%- set propertyName = pn | snake_case %}
31                {%- set pythonType = "" -%}
32                {%- if property.type == 'integer' -%}
33                    {%- if property.format == 'int32' -%}
34                        {%- set pythonType = "int" -%}
35                    {%- elif property.format == 'int64' -%}
36                        {%- set pythonType = "int" -%}
37                    {%- else -%}    
38                        {%- set pythonType = "int" -%}
39                    {%- endif -%}
40                {%- elif property.type == 'number' -%}
41                    {%- if property.format == 'float' -%}
42                        {%- set pythonType = "float" -%}
43                    {%- elif property.format == 'double' -%}
44                        {%- set pythonType = "float" -%}
45                    {%- elif property.format == 'decimal' -%}
46                        {%- set pythonType = "float" -%}
47                    {%- else -%}
48                        {%- set pythonType = "float" -%}
49                    {%- endif -%}
50                {%- elif property.type == 'string' -%}
51                    {%- if property.format == 'date-time' -%}
52                        {%- set pythonType = "datetime" -%}
53                    {%- endif -%}
54                    {%- if property.format == 'email' -%}
55                        {%- set pythonType = "str" -%}
56                    {%- endif -%}
57                    {%- if property.format == 'uri' -%}
58                        {%- set pythonType = "str" -%}
59                    {%- endif -%}
60                    {%- if property.format == 'date' -%}
61                        {%- set pythonType = "datetime" -%}
62                    {%- endif -%}
63                    {%- if property.format == 'time' -%}
64                        {%- set pythonType = "timedelta" -%}
65                    {%- endif -%}
66                    {%- if property.format == 'uuid' -%}
67                        {%- set pythonType = "str" -%}
68                    {%- endif -%}
69                    {%- if property.format == 'ipv4' -%}
70                        {%- set pythonType = "str" -%}
71                    {%- endif -%}
72                {%- endif -%}
73                self.{{ propertyName }} = {{ pythonType }}
74            {%- endfor -%}
75            {%- endif %}
76   {%- endmacro -%}

77   {%- for name, type in schema.definitions.items() -%}
78       {{ emitclass(type, name) }}
79   {%- endfor -%}
80   {%- for name, type in schema.properties.items() -%}
81       {%- if type.type == 'array' -%}
82           {%- set arrayType = type.items['$ref'] | schema_type -%}
83           class {{ name | camel_case }}({{ list_type }}[{{ arrayType | camel_case }}]):
84               pass
85       {%- else -%}
86           {{ emitclass(type, name) }}
87       {%- endif -%}
88   {%- endfor -%}


