 {%- set groups = root.groups %}
 
 // this file was generated by a tool 
 
 using CloudNative.CloudEvents;
 using CloudNative.CloudEvents.Endpoints;
 using CloudNative.CloudEvents.SystemTextJson;
 using Microsoft.Extensions.Logging;
 
 {% for group_key, group in groups.items() -%}
 {%- set pascalGroupName = group.id | default(group_key) | pascal -%}
 namespace {{ project_name | pascal }}.{{ pascalGroupName }}
 {
     public partial class EventProducer
     {
         private readonly ContentMode contentMode;
         private readonly CloudEventFormatter formatter;
         private readonly ProducerEndpoint endpoint;
 
         public EventProducer(ProducerEndpoint endpoint, ContentMode contentMode, CloudEventFormatter formatter)
         {
             this.contentMode = contentMode;
             this.formatter = formatter;
             this.endpoint = endpoint;
         }

         public ProducerEndpoint Endpoint
         {
            get 
            {
                return this.endpoint;
            }
         }
 
         {%- if root.endpoints -%} 
         {%- for endpoint_key in root.endpoints.keys() -%}
         {%- set endpoint = root.endpoints[endpoint_key] -%}
         {%- if endpoint.usage == "producer" -%}
           {%- set protocol = endpoint.config.protocol | lower -%}
           {%- set options = endpoint.config.options -%}
           {%- set endpoints = endpoint.config.endpoints %}
                
        public static EventProducer CreateFor{{ endpoint_key | pascal | strip_namespace }}(ILogger logger, IEndpointCredential credential, ContentMode contentMode, CloudEventFormatter formatter) 
        {       
            {%- if options %}
            var options = new Dictionary<string, string> {
            {%- for key, value in options.items()%}
                { "{{ key }}" , "{{ value }}" }
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            {%- endif %}
            var endpoints = new List<Uri> {
            {%- for uri in endpoints %}
                new Uri("{{ uri }}")
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            return new EventProducer(ProducerEndpoint.Create(logger, credential, Protocol.{{ protocol | pascal }}, {% if options %}options, {% else %}null, {% endif %}endpoints), 
              contentMode, formatter);
        }
        {%- endif -%}
        {%- endfor -%}
        {% endif %}

        {% for id in group.definitions -%}
        {%- set definition = group.definitions[id] -%}
        {%- set pascalDefinitionName = definition.id | pascal %}
        public async Task Send{{ pascalDefinitionName | strip_namespace }}Async(
        {%- if definition.schemaurl -%}
        {{ definition.schemaurl | schema_type | strip_namespace | pascal }} data
        {%- else -%}
        object data
        {%- endif %}    
        {%- for attrname in definition.metadata.attributes -%}
        {%- set attribute = definition.metadata.attributes[attrname] -%}
            {%- if attribute.type == "uritemplate" -%}
                {%- for placeholder in attribute.value | regex_search('\{([A-Za-z0-9_]+)\}') -%}
                , string {{ placeholder }}
                {%- endfor -%}
            {%- elif attribute.value is not defined -%}
                {%- if not attrname == "time" and not attrname == "id" -%}
                , string {{ attrname }}{%- if not attribute.required %} = default {%- endif %}{% endif -%}
            {%- endif -%}
        {%- endfor -%} 
        )
        {
            CloudEvent cloudEvent = new CloudEvent()
            {
            {%- for attrname in definition.metadata.attributes -%}
            {%- set attribute = definition.metadata.attributes[attrname] -%}
            {%- if attrname in ["subject", "type", "datacontenttype"] -%}
                {%- set attrProp = attrname | pascal | replace("Datacontenttype", "DataContentType") %}
                {{ attrProp }} = {% if attribute.value -%}$"{{ attribute.value }}"{%- else -%}{{ attrname }}{%- endif -%},
            {%- endif -%}
            {%- if attrname in [ "source", "dataschema"] -%}
                {%- set attrProp = attrname | pascal | replace("Dataschema", "DataSchema") %}
                {{ attrProp }} = {% if attribute.value -%}new Uri($"{{ attribute.value }}", UriKind.RelativeOrAbsolute){%- else -%}{{ attrname }}{%- endif -%},
            {%- endif -%}
            {%- if attrname in ["time"] %}
                {{ attrname | pascal }} = {% if attribute.value -%}
                    {%- if attribute.value == "0001-01-01T00:00:00+00:00" -%}
                       DateTime.UtcNow
                    {%- else -%}   
                       DateTime.Parse("{{- attribute.value -}}")
                    {%- endif -%}
                  {%- else -%}
                     DateTime.UtcNow
                  {%- endif -%},
            {%- endif -%}
            {%- if attrname in ["id"] %}
                {{ attrname | pascal }} = Guid.NewGuid().ToString(),
            {%- endif -%}
            {%- endfor %}
            };
            {% for attrname in definition.metadata.attributes -%}
            {%- set attribute = definition.metadata.attributes[attrname] -%}
            {%- if attrname not in ["id", "time", "source", "subject", "type", "dataschema", "datacontenttype", "source"] -%}
            cloudEvent.SetAttributeAsString("{{ attrname }}",{%- if attribute.value -%}"{{ attribute.value }}"{%- else -%}{{ attrname }}{%- endif -%});
            {%- endif %}
            {%- endfor -%}
            cloudEvent.Data = data;
            await endpoint.SendAsync(cloudEvent, contentMode, formatter);
        }
        {% endfor %}
    }
}
{% endfor -%}