{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "util.jinja.include" as util -%}
{{ util.CommonFileHeader() }}

{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}

using CloudNative.CloudEvents;
using CloudNative.CloudEvents.SystemTextJson;
using Microsoft.Extensions.Logging;
 
{% for messagegroup_key, messagegroup in messagegroups.items() -%}
{%- set pascalGroupName = messagegroup.id  | pascal -%}
namespace {{ project_name | pascal }}
{
    {%- set class_name = ( pascalGroupName | strip_namespace )+"EventProducer" %}
    public partial class {{ class_name }}
    {
        {%- if uses_cloudevents_message %}
        public event EventHandler<CloudEvent>? BeforeSend;
        private readonly ContentMode contentMode;
        private readonly CloudEventFormatter formatter;
        {%- endif %}
        private readonly HttpProducer endpoint;

        private {{ class_name }}(HttpProducer endpoint{%- if uses_cloudevents_message -%}, ContentMode contentMode, CloudEventFormatter formatter{%- endif -%})
        {
            {%- if uses_cloudevents_message %}
            this.contentMode = contentMode;
            this.formatter = formatter;
            {%- endif %}
            this.endpoint = endpoint;
        }

        {%- if root.endpoints -%} 
        {%- for endpoint_key in root.endpoints.keys() -%}
        {%- set endpoint = root.endpoints[endpoint_key] -%}
        {%- if endpoint.usage == "producer" -%}
            {%- set protocol = endpoint.config.protocol | lower -%}
            {%- set options = endpoint.config.options -%}
            {%- set endpoints = endpoint.config.endpoints %}

        public static {{ class_name }} CreateFor{{ endpoint_key | pascal | strip_namespace }}(ILogger logger, EndpointCredential credential {% if uses_cloudevents_message %}, ContentMode contentMode, CloudEventFormatter formatter {% endif %}) 
        {       
            {%- if options %}
            var options = new Dictionary<string, string> {
            {%- for key, value in options.items()%}
                { "{{ key }}" , "{{ value }}" }
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            {%- endif %}
            var endpoints = new List<Uri> {
            {%- for epo in endpoints %}
                new Uri("{{ epo.uri }}")
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            return new {{ class_name }}(new HttpProducer(logger, credential, {% if options %}options, {% else %}new Dictionary<string,string>(), {% endif %}endpoints){%- if uses_cloudevents_message %}, contentMode, formatter{%- endif %});
        }
        {%- endif -%}
        {%- endfor -%}
        {% else %}
        public static {{ class_name }} Create(ILogger logger, EndpointCredential credential {% if uses_cloudevents_message %}, ContentMode contentMode, CloudEventFormatter formatter {% endif %}, Dictionary<string, string> options = null, List<Uri> endpoints = null) 
        {
            return new {{ class_name }}(new HttpProducer(logger, credential, options, endpoints), {% if uses_cloudevents_message %}contentMode, formatter{% endif %});
        }
        {%- endif %}

        {% for id in messagegroup.messages -%}
        {%- set message = messagegroup.messages[id] -%}
        {%- set pascal_message_name = message.id | pascal %}
        {%- set isCloudEvent = cloudEvents.isCloudEvent(message) %}
        public async Task Send{{ pascal_message_name | strip_namespace }}Async(
        {{ util.body_type(data_project_name, root, message) }} data
        {%- if isCloudEvent -%}
        {{- cloudEvents.DeclareUriTemplateArguments(message) -}}
        {%- endif -%}
        {%- if isCloudEvent and "datacontenttype" in message.metadata and "value" in message.metadata["datacontenttype"] %}
        , string contentType = "{{ message.metadata["datacontenttype"]["value"] }}"
        {%- else %}
        , string contentType = System.Net.Mime.MediaTypeNames.Application.Json
        {%- endif %}
        {%- if isCloudEvent %}, CloudEventFormatter? formatter = null{% endif %})
        {
            {% if isCloudEvent %}
            {{- cloudEvents.DeclareCloudNativeCloudEvent("cloudEvent", message) | indent(12)}}
            cloudEvent.Data = {% if message.schemaurl -%}
            {%- set schemaObj = schema_object(root, message.schemaurl ) -%}
            {%- if schemaObj and "format" in schemaObj and not schemaObj.format.lower().startswith("json") -%}
            data.ToByteArray(contentType)
            {%- else -%}
            data
            {%- endif -%}
            {%- else -%}data{%- endif %};
            cloudEvent.DataContentType = contentType;
            if (BeforeSend != null)
            {
                BeforeSend(this, cloudEvent);
            }
            await endpoint.SendAsync(cloudEvent, contentMode, formatter);
            {% endif %}
        }
        {% endfor %}
    }
}
{% endfor -%}