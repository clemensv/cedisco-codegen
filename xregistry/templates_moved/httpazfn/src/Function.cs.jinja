{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "util.jinja.include" as util -%}
{{ util.CommonFileHeader() }}

{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set function_name = project_name | pascal | strip_dots -%}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text.Json;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration;
using CloudNative.CloudEvents;
using CloudNative.CloudEvents.Protobuf;
using CloudNative.CloudEvents.Avro;
using AvroEventFormatter = CloudNative.CloudEvents.Avro.AvroEventFormatter;
using CloudNative.CloudEvents.SystemTextJson;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;

namespace {{ project_name | pascal }}
{
    {%- set class_name = (project_name | pascal | strip_namespace)+"Base" %}
    public class {{ class_name }}
    {
        private static readonly CloudEventFormatter jsonFormatter = new JsonEventFormatter();
        private static readonly CloudEventFormatter protoFormatter = new ProtobufEventFormatter();
        private static readonly CloudEventFormatter avroFormatter = new global::CloudNative.CloudEvents.Avro.AvroEventFormatter();

       {{ cloudEvents.DeclareDispatchObjectsFields( project_name, messagegroups ) | indent(8) }}
       {{ cloudEvents.DeclareDispatchObjectsConstructor( project_name, class_name, messagegroups, "", "") | indent(8) }}

        public virtual async Task<HttpResponseData> Run(
            [HttpTrigger(AuthorizationLevel.Function, "post", "options", Route = null)] HttpRequestData req,
            FunctionContext executionContext,
            CancellationToken cancellationToken)
        {
            var response = req.CreateResponse(HttpStatusCode.OK);
            if (req.Method == "OPTIONS")
            {
                if (req.Headers.TryGetValues("WebHook-Request-Origin", out var origin))
                {
                    // if all origins are allowed, return the response
                    if (origin.All(o => allowedOrigins.Contains(o)))
                    {
                        return response;
                    }
                }
                response.StatusCode = HttpStatusCode.Unauthorized;
                return response;
            }
            
            ILogger logger = executionContext.GetLogger<{{ class_name }}>();

            CloudEvent? cloudEvent = null;
            var contentType = req.Headers.GetValues("Content-Type").First().Split(";")[0];
            if ( contentType != null && contentType.StartsWith("application/cloudevents") )
            {
                var formatter = contentType.EndsWith("+proto") ? protoFormatter: contentType.EndsWith("+avro") ? avroFormatter : jsonFormatter;
                cloudEvent = formatter.DecodeStructuredModeMessage(req.Body, new System.Net.Mime.ContentType(contentType), null);
            }
            else 
            {
                // do we have a header "CE-SpecVersion"?
                if (req.Headers.TryGetValues("CE-SpecVersion", out var specVersion))
                {
                    var version = specVersion.First();
                    if ( version == "1.0")
                    {
                        var id = req.Headers.GetValues("CE-Id").First();
                        var source = req.Headers.GetValues("CE-Source").First();
                        var subject = req.Headers.GetValues("CE-Subject").First();
                        var type = req.Headers.GetValues("CE-Type").First();
                        var time = req.Headers.GetValues("CE-Time").First();
                        var dataschema = req.Headers.GetValues("CE-DataSchema").First();

                        cloudEvent = new CloudEvent()
                        {
                            Id = id,
                            Source = source != null ? new Uri(source, UriKind.RelativeOrAbsolute) : null,
                            Type = type,
                            Subject = subject,
                            DataContentType = contentType,
                            Data = req.Body,                            
                            Time = DateTimeOffset.Parse(time),
                            DataSchema = dataschema != null ? new Uri(dataschema, UriKind.RelativeOrAbsolute) : null
                        };
                    }
                }
            }
            if ( cloudEvent == null )
            {
                response.StatusCode = HttpStatusCode.BadRequest;
                return response;
            }
            
            {{ cloudEvents.DispatchToDispatchObjects(project_name, data_project_name, root, "cloudEvent", messagegroups, "logger" ) | indent(12) }}

            response.StatusCode = HttpStatusCode.NoContent;
            return response;
        }

        private static readonly HashSet<string> allowedOrigins = new();

        static {{ class_name }}()
        {
            var config = new ConfigurationBuilder()
                .AddJsonFile("local.settings.json", optional: true, reloadOnChange: true)
                .AddEnvironmentVariables()
                .Build();

            if (config["ALLOWED_ORIGINS"] != null)
            {
                foreach( var s in config["ALLOWED_ORIGINS"].Split(';') )
                {
                    allowedOrigins.Add(s);
                }
            }
        }
    }
}