{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "amqp.jinja.include" as amqp -%}
{%- import "mqtt.jinja.include" as mqtt -%}
{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set uses_http_endpoint = (root | exists( "protocol", "http" )) %}
// this file was generated by xRegistry CLI
{%- if not uses_http_endpoint %}
{%- exit %}
{%- endif %}

using CloudNative.CloudEvents;
using CloudNative.CloudEvents.SystemTextJson;
using Azure;
using Azure.Core;
using Azure.Messaging.EventGrid;
using Microsoft.Azure.Messaging.EventGrid.CloudNativeCloudEvents;
using System.Threading.Tasks;

{% for messagegroup_key, messagegroup in messagegroups.items() -%}
{%- set pascalGroupName = messagegroup.id  | pascal -%}
namespace {{ project_name | pascal }}
{
    {%- set class_name = ( pascalGroupName | strip_namespace )+"ProducerClient" %}
    public partial class {{ class_name }}
    {
        private const string cePrefix = "cloudEvents_";
        private const string applicationOctetStream = "application/octet-stream";
        private readonly EventGridPublisherClient eventGridPublisherClient;
        public delegate byte[] Serialize<T>(T data, out ContentType contentType);
        private static CloudEventFormatter defaultFormatter = new JsonEventFormatter();

        public {{ class_name }}(EventGridPublisherClient eventGridPublisherClient)
        {
            this.eventGridPublisherClient = eventGridPublisherClient;
        }

        public EventGridPublisherClient EventGridPublisherClient
        {
            get 
            {
                return this.eventGridPublisherClient;
            }
        }

        {%- if root.endpoints -%} 
        {%- for endpoint_key in root.endpoints.keys() -%}
        {%- set endpoint = root.endpoints[endpoint_key] -%}
        {%- if endpoint.usage == "producer" -%}
        {%- set protocol = endpoint.config.protocol | lower -%}
        {%- if protocol == "http" -%}
        {%- set options = endpoint.config.options -%}
        {%- set endpoints = endpoint.config.endpoints %}
        {%- macro createforbody(class_name, endpoints, options) -%}
            if ( endpointUrl == null )
            {
                {%- if endpoints %}
                endpointUrl = new Uri("{{ endpoints[0].uri }}");
                {%- else %}
                throw new ArgumentNullException(nameof(endpointUrl));
                {%- endif %}
            }
            var eventGridPublisherClient = new EventGridPublisherClient(endpointUrl, credential);
            return new {{ class_name }}(eventGridPublisherClient);
        {%- endmacro %}
        
        public static {{ class_name }} CreateFor{{ endpoint_key | pascal | strip_namespace }}(TokenCredential credential, Uri? endpointUrl = null, string? entityName = null) 
        {   
            {{ createforbody(class_name, endpoints, options) }}
        }

        public static {{ class_name }} CreateFor{{ endpoint_key | pascal | strip_namespace }}(AzureKeyCredential credential, Uri? endpointUrl = null, string? entityName = null) 
        {       
            {{ createforbody(class_name, endpoints, options) }}
        }

        public static {{ class_name }} CreateFor{{ endpoint_key | pascal | strip_namespace }}(AzureSasCredential credential, Uri? endpointUrl = null, string? entityName = null) 
        {       
            {{ createforbody(class_name, endpoints, options) }}
        }
        {%- endif -%}
        {%- endif -%}
        {%- endfor -%}
        {% endif %}

        {% for id in messagegroup.messages -%}
        {%- set definition = messagegroup.messages[id] -%}
        {%- set pascalDefinitionName = definition.id | pascal %}
        {%- set isCloudEvent = not definition.format or definition.format.lower().startswith("cloudevents") -%}
        {%- if isCloudEvent %}
        {%- if definition.description %}
        /// <summary>
        /// {{ definition.description }}
        /// </summary>
        {%- endif %}
        public async Task Send{{ pascalDefinitionName | strip_namespace }}Async(
        {%- if definition.schemaurl or definition.schema -%}
        global::{%- set type_name = (definition.schemaurl if definition.schemaurl else definition.schema) | schema_type( project_name, root,definition.schemaformat) | pascal %}
        {%- else -%}
        {%- set type_name = "object" %}
        {%- endif -%}
        {{ type_name }} data
        {{- cloudEvents.DeclareUriTemplateArguments(definition) -}},
        string contentType = System.Net.Mime.MediaTypeNames.Application.Json)
        {
            {{ cloudEvents.DeclareCloudNativeCloudEvent("cloudEvent", definition) | indent(12) }}
            cloudEvent.Data = data;
            await eventGridPublisherClient.SendCloudNativeCloudEventAsync(cloudEvent);
        }
        {%- endif -%}
        {% endfor %}
    }
}
{% endfor -%}