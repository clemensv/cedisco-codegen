{#- MQTT macros -#}

{%- macro MqttNetHeaders() -%}
using MQTTnet;
using MQTTnet.Packets;
using MQTTnet.Protocol;
{%- endmacro -%}

{%- macro CloudEventsUsings() -%}
using CloudNative.CloudEvents;
using CloudEvent = CloudNative.CloudEvents.CloudEvent;
using CloudNative.CloudEvents.Core;
using CloudNative.CloudEvents.SystemTextJson;
using CloudNative.CloudEvents.Protobuf;
using CloudNative.CloudEvents.Avro;
{%- endmacro -%}

{%- macro EmitArguments(props) -%}
{%- for propname, prop in props.items() %}
{%- if propname != "user-properties" -%}
{%- if propname == "qos" -%}{%- set propname = "qualityOfServiceLevel" -%}{%- endif -%}
{%- if propname == "topic-name" -%}{%- set propname = "topic" -%}{%- endif -%}
{%- if propname == "content-type" -%}{%- set propname = "contentType" -%}{%- endif -%}
{%- if propname == "response-topic" -%}{%- set propname = "responseTopic" -%}{%- endif -%}
{%- if propname == "payload-format" -%}{%- set propname = "payloadFormatIndicator" -%}{%- endif -%}
{%- if propname == "correlation-data" -%}{%- set propname = "correlationData" -%}{%- endif -%}
{%- if propname == "retain" -%}{%- set propname = "retain" -%}{%- endif -%}
{%- if prop.type == "uritemplate" -%}
   {%- for placeholder in prop.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
   , string {{ placeholder }}
   {%- endfor -%}
{%- elif prop.value is not defined -%}
   , string {{ propname }}{%- if not prop.required %} = default {%- endif %}
{%- endif -%}
{%- endif -%}
{%- endfor -%}
{%- if "user-properties" in props %}
  {%- for prop in props["user-properties"] %}
  {%- if prop.type == "uritemplate" -%}
   {%- for placeholder in prop.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
   , string {{ placeholder }}
   {%- endfor -%}
   {%- elif prop.value is not defined -%}
   , string {{ prop.name }}{%- if not prop.required %} = default {%- endif -%}
   {%- endif -%}
  {%- endfor %}
{%- endif -%}
{%- endmacro -%}

{#- Generates a list of arguments for "send" methods that correspond to placeholders in uritemplates -#}
{%- macro DeclareUriTemplateArguments(message) -%}
{%- if message.protocoloptions["properties"] -%}{{ EmitArguments(message.protocoloptions["properties"]) }}{%- endif -%}
{%- endmacro -%}

{#- Helper macro for assigning properties -#}
{%- macro AssignProps(props, as_dict = False) -%}
{%- for propname, prop in props.items() -%}
{%- if propname != "user-properties" -%}
{%- if propname == "qos" -%}{%- set propname = "qualityOfServiceLevel" -%}{%- endif -%}
{%- if propname == "topic-name" -%}{%- set propname = "topic" -%}{%- endif -%}
{%- if propname == "content-type" -%}{%- set propname = "contentType" -%}{%- endif -%}
{%- if propname == "response-topic" -%}{%- set propname = "responseTopic" -%}{%- endif -%}
{%- if propname == "payload-format" -%}{%- set propname = "payloadFormatIndicator" -%}{%- endif -%}
{%- if propname == "correlation-data" -%}{%- set propname = "correlationData" -%}{%- endif -%}
{%- if as_dict %}
["{{ propname }}"] = {% else %}
{{ propname | pascal }} = {% endif -%}
{%- if prop.value is defined -%}
   {%- if prop.type in ["integer", "number", "boolean"] -%}
      {%- if propname == "qualityOfServiceLevel" -%}
         (MqttQualityOfServiceLevel){{ prop.value }}
      {%- elif propname == "payloadFormatIndicator" -%}
         (MqttPayloadFormatIndicator){{ prop.value }}
      {%- else -%}
         {{ prop.value | lower }}
      {%- endif -%}
   {%- else -%}
      $"{{ prop.value }}"
   {%- endif -%}
{%- else -%}
   {{ propname }}
{%- endif -%},
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}

{#- Helper macro for assigning user properties -#}
{%- macro AssignUserProps(props) -%}
{%- for prop in props["user-properties"] %}
new MqttUserProperty("{{ prop.name }}", 
{%- if prop.value -%}
   {%- if prop.type in ["integer", "number", "boolean"] -%}
      {{ prop.value }}
   {%- else -%}
      $"{{ prop.value }}"
   {%- endif -%}
{%- else -%}
   {{ prop.name }}
{%- endif -%}){%- if not loop.last -%},{% endif %}
{%- endfor -%}
{%- endmacro -%}

{#- Generates MQTT message objects from mqttDefinition as message -#}
{%- macro DeclareMqttNetMessage(variable, message) -%}
{%- set properties = message.protocoloptions["properties"] %}
MqttApplicationMessage {{ variable }} = new MqttApplicationMessageBuilder()
{
   {{- AssignProps(properties) | indent(3) }}
   .WithUserProperties(new List<MqttUserProperty> {
      {{- AssignUserProps(properties) | indent(9) }}
   })
   .Build();
{%- endmacro -%}

{%- macro DeclareDispatchObjectsArgs( project_name, messagegroups, withType) -%}
{%- for messagegroupid, messagegroup in messagegroups.items() if (messagegroup | exists( "protocol", "mqtt" )) -%}
{%- set messagegroupname = messagegroupid  | pascal %}
{%- if withType -%}global::{{ messagegroupname | namespace_dot(project_name) | pascal }}I{{ messagegroupname | strip_namespace }}Dispatcher {% endif %}{{ messagegroupid  | strip_namespace | camel }}MqttDispatcher{%- if not loop.last %}, {%- endif -%}
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectsFields(project_name,messagegroups) -%}
{%- for messagegroupid, messagegroup in messagegroups.items() if (messagegroup | exists( "protocol", "mqtt" )) -%}
{%- set handlerName=(messagegroupid  | strip_namespace | camel)+"MqttDispatcher" -%}
{%- set handlerType=(messagegroupid  | namespace_dot(project_name) | pascal)+"I"+(messagegroupid  | strip_namespace | pascal)+"MqttDispatcher" -%}
{{ handlerType }} {{ handlerName }};
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectsConstructor(project_name, class_name, messagegroups, args, body) -%}
{%- if messagegroups | exists( "protocol", "mqtt" ) %}
public {{ class_name }}({{ args }}{%- if args %}, {%- endif -%}
    {%- for messagegroupid, messagegroup in messagegroups.items() -%}
    {%- set messagegroupname = messagegroupid  | pascal -%} 
    {%- set handlerName=(messagegroupid  | strip_namespace | camel)+"MqttDispatcher" -%}
    {%- set handlerType=(messagegroupid  | namespace_dot | pascal)+"I"+(messagegroupid  | strip_namespace | pascal)+"MqttDispatcher" -%}
    {{ handlerType }} {{ handlerName }}
    {%- if not loop.last -%}, {%- endif -%}
    {%- endfor -%})
{
    {% for messagegroupid, messagegroup in messagegroups.items() -%}
    {%- set messagegroupname = messagegroupid  | pascal %}
    {%- set handlerName=(messagegroupid  | strip_namespace | camel)+"MqttDispatcher" -%}
   {%- set handlerType=(messagegroupid  | namespace_dot | pascal)+"I"+(messagegroupid  | strip_namespace | pascal)+"MqttDispatcher" -%}
    this.{{ handlerName }} = {{ handlerName }};
    {%- endfor %}
    {{ body | indent(4) }}
}
{%- endif -%}
{%- endmacro -%}

{%- macro DispatchToDispatchObjects(project_name, data_project_name, root, message, messagegroups, logger) -%}
{%- if messagegroups | exists( "protocol", "mqtt" ) %}
Regex regex; 
Match match; 
var messageTopic = {{ message }}.Topic;
{% for messagegroupid, messagegroup in messagegroups.items() if (messagegroup | exists( "protocol", "mqtt" )) -%}
{%- set handlerName=(messagegroupid  | strip_namespace | camel)+"MqttDispatcher" -%}
{% for messageid, message in messagegroup.messages.items() if (message | exists( "protocol", "mqtt" )) -%}
{% set messagename = messageid | pascal %}
regex = new Regex("^" + "{{ message.protocoloptions.properties.topic.value}}".Replace("{", "(?<").Replace("}", ">[^/]+)") + "$");
match = regex.Match(messageTopic);
if (match.Success)
{
   await this.{{ handlerName }}.On{{ messagename | strip_namespace }}Async({{ message }},
   {%- if message.schemauri or message.schema -%}
   global::{{( message.schemauri if message.schemauri else message.schema) | schema_type( data_project_name, root, message.schemaformat)  | pascal }}.FromData({{ message }}.Payload, {{ message }}.ContentType)
   {%- else -%}
   {{ message }}.Data
   {%- endif %}, match.Groups.Values.Where(g => g.Name != "0").ToDictionary(g => g.Name, g => g.Value));
}   
{% endfor %}
{% endfor %}
{%- endif -%}
{%- endmacro -%}

{%- macro DeclareDispatchInterfaces(project_name, data_project_name, root) -%}
{%- set messagegroups = root.messagegroups -%}
{%- if messagegroups | exists( "protocol", "mqtt" ) %}
{%- set function_name = project_name | pascal | strip_dots -%}
{%- for messagegroupid, messagegroup in messagegroups.items() if (messagegroup | exists( "protocol", "mqtt" )) -%}
{%- set messagegroupname = messagegroupid  | pascal %}
using MQTTnet;
using MQTTnet.Packets;
using MQTTnet.Protocol;
using System.Threading.Tasks;

namespace {{ messagegroupname | concat_namespace(project_name) | pascal }}
{
    public interface I{{ messagegroupname | strip_namespace }}MqttDispatcher
    {
        {%- for messageid, message in messagegroup.messages.items() if ( message | exists( "protocol", "mqtt" )) -%}
        {%- set messagename = messageid | strip_namespace | pascal -%}
        {%- if message.schemauri or message.schema -%}
        {%- set dataType = 'global::' + (( message.schemauri if message.schemauri else message.schema) | schema_type( data_project_name, root, message.schemaformat)  | pascal) -%}
        {%- else -%}
        {%- set dataType = "object" -%}
        {%- endif %}   
        Task On{{ messagename | strip_namespace }}Async(MqttApplicationMessage mqttMessage, {{ dataType }}? data, IDictionary<string, string> parameters);
        {%- endfor %}
    }
}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}

{%- macro CloudEventsMethods() -%}
private static string[] ceAttribs = ["specversion", "dataschema", "time", "source", "subject", "type", "id"];
/// <summary>
/// JSON formatter for CloudEvents.
/// </summary>
protected static readonly CloudEventFormatter jsonFormatter = new JsonEventFormatter();
/// <summary>
/// Protobuf formatter for CloudEvents.
/// </summary>
protected static readonly CloudEventFormatter protoFormatter = new ProtobufEventFormatter();
/// <summary>
/// Avro formatter for CloudEvents.
/// </summary>
protected static readonly CloudEventFormatter avroFormatter = new global::CloudNative.CloudEvents.Avro.AvroEventFormatter();

/// <summary>
/// Checks if an MQTT message is a CloudEvent.
/// </summary>
/// <param name="message">The MQTT message.</param>
/// <param name="key">The attribute key.</param>
/// <returns>True if the message is a CloudEvent.</returns>
protected string? GetCloudEventAttribute(MqttApplicationMessage message, string key)
{
    _logger.LogInformation($"Getting CloudEvent attribute {key}");
    var property = message.UserProperties.FirstOrDefault(p => p.Name == key);
    return property?.Value;
} 

/// <summary>
/// Checks if an MQTT message is a CloudEvent.
/// </summary>
/// <param name="message">The MQTT message.</param>
protected bool IsCloudEvent(MqttApplicationMessage message)
{
    _logger.LogInformation("Checking if Message is a CloudEvent.");
    var contentType = message.ContentType;
    return MimeUtilities.IsCloudEventsContentType(contentType) ||
           message.UserProperties.Any(p => p.Name == "specversion");
}

/// <summary>
/// Extracts a CloudEvent from an MQTT message.
/// </summary>
/// <param name="message">The MQTT message.</param>
protected CloudEvent CloudEventFromMessage(MqttApplicationMessage message)
{
   try
   {
      _logger.LogInformation("Extracting CloudEvent from Message.");
      CloudEventFormatter? formatter = null;
      var contentType = message.ContentType?.Split(';')[0];
      if (contentType != null && contentType.StartsWith("application/cloudevents"))
      {
         _logger.LogInformation($"Using structured mode for CloudEvent with content type {contentType}.");
         formatter = contentType.EndsWith("+proto") ? protoFormatter : contentType.EndsWith("+avro") ? avroFormatter : jsonFormatter;
         return formatter.DecodeStructuredModeMessage(message.PayloadSegment, new System.Net.Mime.ContentType(contentType), null);
      }
      else
      {
         _logger.LogInformation("Using binary mode for CloudEvent.");
         var cloudEvent = new CloudEvent
         {
            Data = message.PayloadSegment != null ? message.PayloadSegment.ToArray():null,
            DataContentType = contentType,
         };
         string? specVersion = GetCloudEventAttribute(message, "specversion");
         if (specVersion != "1.0") throw new Exception("Unsupported CloudEvent specversion: " + specVersion);
         string? dataSchema = GetCloudEventAttribute(message, "dataschema");         
         if (dataSchema != null) cloudEvent.DataSchema = new Uri(dataSchema, UriKind.RelativeOrAbsolute);
         string? time = GetCloudEventAttribute(message, "time");
         if (time != null) cloudEvent.Time = DateTime.Parse(time);
         string? source = GetCloudEventAttribute(message, "source");         
         if (source != null) cloudEvent.Source = new Uri(source, UriKind.RelativeOrAbsolute);
         string? subject = GetCloudEventAttribute(message, "subject");
         if (subject != null) cloudEvent.Subject = subject;
         string? type = GetCloudEventAttribute(message, "type");
         if (type != null) cloudEvent.Type = type;
         string? id = GetCloudEventAttribute(message, "id");
         if (id != null) cloudEvent.Id = id;
         foreach (var property in message.UserProperties)
         {
            var key = property.Name;
            var attributeName = key.ToLower();
            if (ceAttribs.Any(a=>a==attributeName))
            {
               continue;
            }
            cloudEvent[attributeName] = property.Value;
         }
         return cloudEvent;
      }
   }
   catch (Exception e)
   {
      _logger.LogError(e, "Error extracting CloudEvent from Message.");
      throw;
   }
}
{%- endmacro -%}
