{#- AMQP macros -#}

{%- import "util.jinja.include" as util -%}

{%- macro isAmqp(message) -%}
{%- if message.binding and message.binding.lower().startswith("amqp") -%}
true
{%- endif -%}
{%- endmacro -%}

{%- macro usesAmqpBinding(root) %}
{%- if (root.messagegroups | exists( "binding", "amqp" )) -%}
true
{%- endif -%}
{%- endmacro %}

{%- macro usesAmqpEndpoint(root) %}
{%- if (root.endpoints | exists( "protocol", "amqp" )) -%}
true
{%- endif -%}
{%- endmacro %}

{%- macro AmqpNetLiteHeaders() -%}
using Amqp;
using Amqp.Framing;
using Amqp.Types;
{%- endmacro -%}

{%- macro EmitArguments(props) -%}
{%- for propname, prop in props.items() %}
{%- if prop.type == "uritemplate" -%}
   {%- for placeholder in prop.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
   , string {{ placeholder }}
   {%- endfor -%}
{%- elif prop.value is not defined -%}
   , string {{ propname }}{%- if not prop.required %} = default {%- endif %}{% endif -%}
{%- endfor -%}
{%- endmacro -%}

{#- Generates a list of arguments for "send" methods that correspond to placeholders in uritemplates -#}
{%- macro DeclareUriTemplateArguments(message) -%}
{%- if message.message["header"] -%}{{ EmitArguments(message.message["header"]) }}{%- endif -%}
{%- if message.message["footer"] -%}{{ EmitArguments(message.message["footer"]) }}{%- endif -%}
{%- if message.message["message-annotations"] -%}{{ EmitArguments(message.message["message-annotations"]) }}{%- endif -%}
{%- if message.message["delivery-annotations"] -%}{{ EmitArguments(message.message["delivery-annotations"]) }}{%- endif -%}
{%- if message.message["properties"] -%}{{ EmitArguments(message.message["properties"]) }}{%- endif -%}
{%- if message.message["application-properties"] -%}{{ EmitArguments(message.message["application-properties"]) }}{%- endif -%}
{%- endmacro %}

{#- Helper macro for assigning properties -#}
{%- macro AssignProps(props, as_dict = False) -%}
{%- for propname, prop in props.items() -%}
{%- if as_dict %}
["{{ propname }}"] = {% else %}
{{ propname | pascal }} = {% endif -%}
{%- if prop.value -%}
   {%- if prop.type in ["integer", "number", "boolean"] -%}
      {{ prop.value }}
   {%- elif prop.type == "uri" or prop.type == "uritemplate" -%}
      new Uri($"{{ prop.value }}", UriKind.RelativeOrAbsolute),
   {%- else -%}
      $"{{ prop.value }}"
   {%- endif -%}
{%- else -%}
   {{ propname }}
{%- endif -%},
{%- endfor -%}
{%- endmacro -%}

{#- Generates AMQP message objects from amqpDefinition as message -#}
{%- macro DeclareAmqpNetLiteMessage(variable, message) -%}
{%- set header = message.message["header"] %}
{%- set footer = message.message["footer"] %}
{%- set messageAnnotations = message.message["message-annotations"] %}
{%- set deliveryAnnotations = message.message["delivery-annotations"] %}
{%- set properties = message.message["properties"] %}
{%- set applicationProperties = message.message["application-properties"] %}
Amqp.Message {{ variable }} = new Amqp.Message()
{
{%- if header %}
   Header = new Header() 
   {
   {{- AssignProps(header) | indent(6) }}
   },
{%- if footer %}
   Footer = new Footer() 
   {
   {{- AssignProps(footer) | indent(6) }}
   },
{%- endif %}
{%- if messageAnnotations %}
   MessageAnnotations = new MessageAnnotations()
   {
   {{- AssignProps(messageAnnotations) | indent(6) }}
   },
{%- endif %}
{%- if deliveryAnnotations %}
   DeliveryAnnotations = new DeliveryAnnotations()
   {
   {{- AssignProps(deliveryAnnotations) | indent(6) }}
   },
{%- endif %}
{%- if properties %}
   Properties = new Properties()
   {
   {{- AssignProps(properties) | indent(6) }}
   },
{%- endif %}
{%- if applicationProperties %}
   ApplicationProperties = new ApplicationProperties()
   {
   {{- AssignProps(applicationProperties, True) | indent(6) }}
   },
{%- endif %}
{%- endif %}
};
{%- endmacro -%}


{%- macro DeclareDispatchObjectsArgs( project_name, messagegroups, withType) -%}
{%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("binding", "amqp" )) -%}
{%- set pascalGroupName = messagegroup.id  | pascal %}
{%- if withType -%}global::{{ pascalGroupName | concat_namespace(project_name) | pascal }}.I{{ pascalGroupName | strip_namespace }}Dispatcher {% endif %}{{ messagegroup.id  | strip_namespace | camel }}AmqpDispatcher{%- if not loop.last %}, {%- endif -%}
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectField(project_name,messagegroup) -%}
{%- set handlerName=(messagegroup.id | strip_namespace | camel)+"AmqpDispatcher" -%}
{%- set handlerType=(messagegroup.id | concat_namespace(project_name) | pascal)+".I"+(messagegroup.id | strip_namespace | pascal)+"AmqpDispatcher" %}
{{ handlerType }} {{ handlerName }};
{%- endmacro -%}

{%- macro DeclareDispatchObjectsFields(project_name,messagegroups) -%}
{%- for messagegroup_key, messagegroup in messagegroups.items() if messagegroup | exists("binding", "amqp" ) %}
{{ DeclareDispatchObjectField( project_name, messagegroup )}}
{%- endfor %}
{%- endmacro -%}

{%- macro DeclareDispatchObjectConstructor(project_name, class_name, messagegroup, args, body) -%}
public {{ class_name }}({%- if args %}{{ args }}, {%- endif -%}
    {%- set handlerName=(messagegroup.id | strip_namespace | camel)+"AmqpDispatcher" -%}
    {%- set handlerType=(messagegroup.id | concat_namespace(project_name) | pascal)+".I"+(messagegroup.id | strip_namespace | pascal)+"AmqpDispatcher" -%}
    {{ handlerType }} {{ handlerName }}
{
    this.{{ handlerName }} = {{ handlerName }};
    {{ body | indent(4) }}
}
{%- endmacro -%}

{%- macro DeclareDispatchObjectsConstructor(project_name, class_name, messagegroups, args, body) -%}
{%- if messagegroups | exists("binding", "amqp" ) %}

public {{ class_name }}({{ args }}{%- if args %}, {%- endif -%}
    {%- for messagegroup_key, messagegroup in messagegroups.items() if messagegroup | exists("binding", "amqp" ) -%}
    {%- set pascalGroupName = messagegroup.id  | pascal -%} 
    {%- set handlerName=(messagegroup.id  | strip_namespace | camel)+"AmqpDispatcher" -%}
    {%- set handlerType=(messagegroup.id  | concat_namespace(project_name) | pascal)+".I"+(messagegroup.id  | strip_namespace | pascal)+"AmqpDispatcher" -%}
    {{ handlerType }} {{ handlerName }}
    {%- if not loop.last -%}, {%- endif -%}
    {%- endfor -%})
{
    {% for messagegroup_key, messagegroup in messagegroups.items() if messagegroup | exists("binding", "amqp" ) -%}
    {%- set pascalGroupName = messagegroup.id  | pascal %}
    {%- set handlerName=(messagegroup.id  | strip_namespace | camel)+"AmqpDispatcher" -%}
    {%- set handlerType=(messagegroup.id  | concat_namespace(project_name) | pascal)+".I"+(messagegroup.id  | strip_namespace | pascal)+"AmqpDispatcher" -%}
    this.{{ handlerName }} = {{ handlerName }};
    {%- endfor %}
    {{ body | indent(4) }}
}
{%- endif -%}
{%- endmacro -%}

{%- macro DispatchToDispatchObjects(project_name, data_project_name, root, message, messagegroups, logger) -%}
{%- if messagegroups | exists("binding", "amqp" ) %}
var messageSubject = {{ message }}.Properties.Subject;
switch (messageSubject)
{
   {% for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("binding", "amqp" )) -%}
   {%- set handlerName=(messagegroup.id  | strip_namespace | camel)+"AmqpDispatcher" -%}
   {%- for id, message in messagegroup.messages.items() if (message | exists("binding", "amqp" )) -%}
   {%- set message_body_type = util.body_type(data_project_name, root, message) %}
   {%- set pascalDefinitionName = id | pascal %}
   case "{{ id }}":
         if ( this.{{ handlerName }} != null )
         {
            await this.{{ handlerName }}.On{{ pascalDefinitionName | strip_namespace }}Async(amqpMessage,
            {%- if message_body_type != "byte[]" -%}
            {{ message_body_type }}.FromData(amqpMessage.Body, amqpMessage.Properties.ContentType)
            {%- else -%}
            amqpMessage.Data
            {%- endif %});
            break;
         }
         break;
   {% endfor %}
   {% endfor %}
   default:
      {{ logger }}.LogError($"Unsupported message subject {messageSubject}");
      break;
}
{%- endif -%}
{%- endmacro -%}

{%- macro DeclareDispatchInterfaces(project_name, data_project_name, root) -%}
{%- set messagegroups = root.messagegroups -%}
{%- if messagegroups | exists("binding", "amqp" ) %}
{%- set function_name = project_name | pascal | strip_dots -%}
{%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("binding", "amqp" )) -%}
{%- set pascalGroupName = messagegroup.id  | pascal %}
{{- AmqpNetLiteHeaders() }}
using System.Threading.Tasks;

namespace {{ pascalGroupName | concat_namespace(project_name) | pascal }}
{
   public interface I{{ pascalGroupName | strip_namespace }}AmqpDispatcher
   {
      {%- for id, message in messagegroup.messages.items() if (message | exists("binding", "amqp" )) -%}
      {%- set pascalDefinitionName = message.id | strip_namespace | pascal -%}
      {%- set dataType = util.body_type(data_project_name, root, message) %}
      Task On{{ pascalDefinitionName | strip_namespace }}Async(Message amqpMessage, {{ dataType }} data);
      {%- endfor %}
   }
}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}

{%- macro CloudEventsMethods() -%}
private static string[] ceAttribs = { "specversion", "dataschema", "time", "source", "subject", "type", "id" };
protected const string amqpCloudEventPrefix1 = "cloudEvents_";
protected const string amqpCloudEventPrefix2 = "cloudEvents:";
protected static readonly CloudEventFormatter jsonFormatter = new JsonEventFormatter();
protected static readonly CloudEventFormatter protoFormatter = new ProtobufEventFormatter();
protected static readonly CloudEventFormatter avroFormatter = new global::CloudNative.CloudEvents.Avro.AvroEventFormatter();

protected string? GetCloudEventAttribute(Message amqpMessage, string key)
{
    if (amqpMessage.ApplicationProperties.Map.TryGetValue(amqpCloudEventPrefix1 + key, out var value) ||
        amqpMessage.ApplicationProperties.Map.TryGetValue(amqpCloudEventPrefix2 + key, out value))
    {
        return value as string;
    }
    return null;
}

protected CloudEvent CloudEventFromMessage(Message amqpMessage)
{
    CloudEventFormatter? formatter = null;
    var contentType = amqpMessage.Properties.ContentType?.ToString().Split(';')[0];
    if (contentType != null && contentType.StartsWith("application/cloudevents"))
    {
        formatter = contentType.EndsWith("+proto") ? protoFormatter :
                    contentType.EndsWith("+avro") ? avroFormatter : jsonFormatter;
         if (amqpMessage.Body is Amqp.Framing.Data bytes)
         {
            return formatter.DecodeStructuredModeMessage(bytes.Binary, new System.Net.Mime.ContentType(contentType), null);
         }
         else
         {
            throw new Exception("Unsupported CloudEvent body type: " + amqpMessage.Body.GetType().Name);
         }
    }
    else
    {
        var bytes = amqpMessage.Body as Amqp.Framing.Data;
        if ( bytes == null )
        {
            throw new Exception("Unsupported CloudEvent body type: " + amqpMessage.Body.GetType().Name);
        }
        var cloudEvent = new CloudEvent()
        {
            Data = bytes,
            DataContentType = contentType,
        };
        string? specVersion = GetCloudEventAttribute(amqpMessage, "specversion");
        if (specVersion != "1.0") throw new Exception("Unsupported CloudEvent specversion: " + specVersion);
        string? dataSchema = GetCloudEventAttribute(amqpMessage, "dataschema");
        string? time = GetCloudEventAttribute(amqpMessage, "time");
        string? source = GetCloudEventAttribute(amqpMessage, "source");
        string? subject = GetCloudEventAttribute(amqpMessage, "subject");
        string? type = GetCloudEventAttribute(amqpMessage, "type");
        string? id = GetCloudEventAttribute(amqpMessage, "id");
        if (dataSchema != null) cloudEvent.DataSchema = new Uri(dataSchema);
        if (time != null) cloudEvent.Time = DateTime.Parse(time);
        if (source != null) cloudEvent.Source = new Uri(source);
        if (subject != null) cloudEvent.Subject = subject;
        if (type != null) cloudEvent.Type = type;
        if (id != null) cloudEvent.Id = id;
        foreach (var key in amqpMessage.ApplicationProperties.Map.Keys)
        {
            if (key.ToString().StartsWith(amqpCloudEventPrefix1) || key.ToString().StartsWith(amqpCloudEventPrefix2))
            {
                var attributeName = key.ToString().Substring(amqpCloudEventPrefix1.Length);
                if (ceAttribs.Any(a => a == attributeName))
                {
                    continue;
                }
                cloudEvent[attributeName] = amqpMessage.ApplicationProperties.Map[key] as string;
            }
        }
        return cloudEvent;
    }
}

public static bool IsCloudEvent(Message amqpMessage) =>
    MimeUtilities.IsCloudEventsContentType(amqpMessage.Properties.ContentType) ||
    amqpMessage.ApplicationProperties.Map.ContainsKey(amqpCloudEventPrefix1) ||
    amqpMessage.ApplicationProperties.Map.ContainsKey(amqpCloudEventPrefix2);
{%- endmacro -%}
