{#- CloudEvents macros -#}

{%- macro isCloudEvent(message) %}
{%- if message.format and message.format.lower().startswith("cloudevents") -%}
true
{%- endif -%}
{%- endmacro %}

{%- macro usesCloudEvents(root) %}
{%- if (root.messagegroups | exists( "format", "cloudevents" )) -%}
true
{%- endif -%}
{%- endmacro %}

{%- macro CloudEventsUsings() %}
using CloudNative.CloudEvents;
using CloudNative.CloudEvents.Core;
using CloudNative.CloudEvents.SystemTextJson;
using CloudNative.CloudEvents.Protobuf;
using CloudNative.CloudEvents.Amqp;
using CloudNative.CloudEvents.Avro;
{% endmacro %}

{#- Generates a list of arguments for "send" methods that correspond to placeholders in uritemplates -#}
{%- macro DeclareUriTemplateArguments(message) -%}
{%- for attrname in message.metadata if attrname not in ["datacontenttype", "dataschema"] -%}
{%- set attribute = message.metadata[attrname] -%}
    {%- if attribute.type == "uritemplate" -%}
        {%- for placeholder in attribute.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
        , string {{ placeholder }}
        {%- endfor -%}    
    {%- elif attribute.value is not defined -%}
        {%- if not attrname == "time" and not attrname == "id" -%}
        , string {{ attrname }}{%- if not attribute.required %} = default {%- endif %}{% endif -%}
    {%- endif -%}
{%- endfor -%} 
{%- endmacro -%}

{#- Generates a CloudNative.CloudEvents.CloudEvent object from cloudEventDefinition as message -#}
{%- macro DeclareCloudNativeCloudEvent(variable, message) -%}
CloudEvent {{ variable }} = new CloudEvent()
{
{%- if "type" not in message.metadata %}
    Type = "{{ message.id }}",
{%- endif %}
{%- for attrname in message.metadata -%}
{%- set attribute = message.metadata[attrname] -%}
{%- if attrname in ["datacontenttype"] %}
    DataContentType = contentType,
{%- endif -%}
{%- if attrname in ["dataschema"] and message.schemaurl %}
    DataSchema = new Uri("xreg:{{message.schemaurl.lstrip('#/')}}", UriKind.RelativeOrAbsolute),
{%- endif -%}
{%- if attrname in ["subject", "type"] %}
    {%- set attrProp = attrname | pascal %}
    {{ attrProp }} = {% if attribute.value -%}$"{{ attribute.value }}"{%- else -%}{{ attrname }}{%- endif -%},
{%- endif -%}
{%- if attrname in [ "source"] -%}
    {%- set attrProp = attrname | pascal | replace("Dataschema", "DataSchema") %}
    {{ attrProp }} = {% if attribute.value -%}new Uri($"{{ attribute.value }}", UriKind.RelativeOrAbsolute){%- else -%}new Uri({{ attrname }}){%- endif -%},
{%- endif -%}
{%- if attrname in ["time"] %}
    {{ attrname | pascal }} = {% if attribute.value -%}
        {%- if attribute.value == "0001-01-01T00:00:00+00:00" -%}
            DateTime.UtcNow
        {%- else -%}   
            DateTime.Parse("{{- attribute.value -}}")
        {%- endif -%}
        {%- else -%}
            DateTime.UtcNow
        {%- endif -%},
{%- endif -%}
{%- if attrname in ["id"] %}
    {{ attrname | pascal }} = Guid.NewGuid().ToString(),
{%- endif -%}
{%- endfor %}
};
{% for attrname in message.metadata -%}
{%- set attribute = message.metadata[attrname] -%}
{%- if attrname not in ["id", "time", "source", "subject", "type", "dataschema", "datacontenttype", "source"] -%}
cloudEvent.SetAttributeFromString("{{ attrname }}",{%- if attribute.value -%}"{{ attribute.value }}"{%- else -%}{{ attrname }}{%- endif -%});
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}

{#- Generates a CloudNative.CloudEvents.CloudEvent object from cloudEventDefinition as message -#}
{%- macro DeclareCloudNativeCloudEventFromJson(variable, json, message) -%}
};
{% for attrname in message.metadata -%}
{%- set attribute = message.metadata[attrname] -%}
{%- if attrname not in ["id", "time", "source", "subject", "type", "dataschema", "datacontenttype", "source"] -%}
cloudEvent.SetAttributeFromString("{{ attrname }}",{%- if attribute.value -%}"{{ attribute.value }}"{%- else -%}{{ attrname }}{%- endif -%});
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}

{%- macro DeclareDispatchObjectsArgs( project_name, messagegroups, withType) -%}
{%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("format", "cloudevents" )) -%}
{%- set pascalGroupName = messagegroup.id  | pascal %}
{%- if withType -%}global::{{ pascalGroupName | concat_namespace(project_name) | pascal }}.I{{ pascalGroupName | strip_namespace }}Dispatcher {% endif %}{{ messagegroup.id  | strip_namespace | camel }}Dispatcher{%- if not loop.last %}, {%- endif -%}
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectField(project_name,messagegroup) %}
{%- set pascalGroupName = messagegroup.id | pascal %}
global::{{ pascalGroupName | concat_namespace(project_name) | pascal }}.I{{ pascalGroupName | strip_namespace }}Dispatcher {{ messagegroup.id | strip_namespace | camel }}Dispatcher;
{%- endmacro-%}

{%- macro DeclareDispatchObjectsFields(project_name,messagegroups) %}
{%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("format", "cloudevents" )) -%}
{{ DeclareDispatchObjectField( project_name, messagegroup )}}
{%- endfor %}
{%- endmacro-%}


{%- macro DeclareDispatchObjectMock(project_name,messagegroup) %}
{%- set pascalGroupName = messagegroup.id | pascal %}
private Mock<global::{{ pascalGroupName | concat_namespace(project_name) | pascal }}.I{{ pascalGroupName | strip_namespace }}Dispatcher> _{{ messagegroup.id | strip_namespace | camel }}DispatcherMock;
{%- endmacro-%}

{%- macro SetupDispatchObjectMock(project_name,messagegroup) %}
{%- set pascalGroupName = messagegroup.id | pascal %}
_{{ messagegroup.id | strip_namespace | camel }}DispatcherMock = new Mock<global::{{ pascalGroupName | concat_namespace(project_name) | pascal }}.I{{ pascalGroupName | strip_namespace }}Dispatcher>();
{%- endmacro-%}

{%- macro SetupDispatchObjectMocks(project_name,messagegroups) %}
{%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("format", "cloudevents" )) -%}
{{ SetupDispatchObjectMock( project_name, messagegroup )}}
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectMocks(project_name,messagegroups) %}
{%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("format", "cloudevents" )) -%}
{{ DeclareDispatchObjectMock( project_name, messagegroup )}}
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectConstructor(project_name, class_name, messagegroup, args, body) %}
public {{ class_name }}({%- if args %}{{ args }}, {%- endif -%}
    global::{{ messagegroup.id | pascal | concat_namespace(project_name) | pascal }}.I{{ messagegroup.id | pascal | strip_namespace }}Dispatcher {{ messagegroup.id | strip_namespace | camel }}Dispatcher
)
{
    this.{{ messagegroup.id | strip_namespace | camel }}Dispatcher = {{ messagegroup.id  | strip_namespace | camel }}Dispatcher;
    {{ body | indent(4) }}
}
{%- endmacro -%}

{%- macro DeclareDispatchObjectsConstructor(project_name, class_name, messagegroups, args, body) %}
{%- if messagegroups | exists("format", "cloudevents" ) %}
public {{ class_name }}( {{ args }}{%- if args %}, {%- endif -%}
    {%- for messagegroup_key, messagegroup in messagegroups.items() -%}
    {%- set pascalGroupName = messagegroup.id  | pascal -%} 
    global::{{ pascalGroupName | concat_namespace(project_name) | pascal }}.I{{ pascalGroupName | strip_namespace }}Dispatcher {{ messagegroup.id  | strip_namespace | camel }}Dispatcher
    {%- if not loop.last -%}, {%- endif -%}
    {%- endfor -%}
)
{
    {%- for messagegroup_key, messagegroup in messagegroups.items() -%}
    {%- set pascalGroupName = messagegroup.id  | pascal %}
    this.{{ messagegroup.id  | strip_namespace | camel }}Dispatcher = {{ messagegroup.id  | strip_namespace | camel }}Dispatcher;
    {%- endfor %}
    {{ body | indent(4) }}
}
{% endif -%}
{%- endmacro -%}

{%- macro DispatchToDispatchObject(project_name, data_project_name, root, cloudEvent, messagegroup, logger) -%}
var cloudEventType = {{ cloudEvent }}.Type;
switch (cloudEventType)
{
    {% for id, message in messagegroup.messages.items() -%}
    {% set pascalDefinitionName = message.id | pascal %}
    case "{{ message.id }}":
        if ( this.{{ messagegroup.id | strip_namespace | camel }}Dispatcher != null )
        {
            await this.{{ messagegroup.id | strip_namespace | camel }}Dispatcher.On{{ pascalDefinitionName | strip_namespace }}Async({{ cloudEvent }},
            {%- if message.schemaurl or message.schema -%}
            global::{{ ( message.schemaurl if message.schemaurl else message.schema) | schema_type( project_name, root, message.schemaformat) | pascal }}.FromData({{ cloudEvent }}.Data, {{cloudEvent}}.DataContentType)
            {%- else -%}
            {{ cloudEvent }}.Data
            {%- endif %});
            break;
        }
        break;
    {% endfor %}
    default:
        {{ logger }}.LogError("Unsupported CloudEvent type {eventType}", cloudEventType);
        break;
}
{%- endmacro -%}


{%- macro DispatchToDispatchObjects(project_name, data_project_name, root, cloudEvent, messagegroups, logger) -%}
{%- if messagegroups | exists("format", "cloudevents" ) -%}
var cloudEventType = {{ cloudEvent }}.Type;
switch (cloudEventType)
{
    {% for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("format", "cloudevents" )) -%}
    {% for id, message in messagegroup.messages.items() -%}
    {% set pascalDefinitionName = message.id | pascal %}
    case "{{ message.id }}":
        if ( this.{{ messagegroup.id  | strip_namespace | camel }}Dispatcher != null )
        {
            await this.{{ messagegroup.id  | strip_namespace | camel }}Dispatcher.On{{ pascalDefinitionName | strip_namespace }}Async({{ cloudEvent }},
            {%- if message.schemaurl or message.schema -%}
            global::{{ ( message.schemaurl if message.schemaurl else message.schema) | schema_type( data_project_name, root, message.schemaformat) | pascal }}.FromData({{ cloudEvent }}.Data, {{cloudEvent}}.DataContentType)
            {%- else -%}
            {{ cloudEvent }}.Data
            {%- endif %});
            break;
        }
        break;
    {% endfor %}
    {% endfor %}
    default:
        {{ logger }}.LogError("Unsupported CloudEvent type {eventType}", cloudEventType);
        break;
}
{%- endif -%}
{%- endmacro -%}

{%- macro DeclareDispatchInterfaces(project_name, data_project_name, root, use_azure_messaging=false) -%}
{%- set messagegroups = root.messagegroups -%}
{%- if messagegroups | exists("format", "cloudevents" ) %}
{%- set function_name = project_name | pascal | strip_dots -%}
using System.Threading.Tasks;
{%- if use_azure_messaging %}
using Azure.Messaging;
{%- else %}
using CloudNative.CloudEvents;
{%- endif %}
{%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("format", "cloudevents" )) -%}
{%- set pascalGroupName = messagegroup.id  | pascal %}
namespace {{ pascalGroupName | concat_namespace(project_name) | pascal }}
{
    public interface I{{ pascalGroupName | strip_namespace }}Dispatcher
    {
        {%- for id, message in messagegroup.messages.items() if (message | exists( "format", "cloudevents" )) -%}
        {%- set pascalDefinitionName = message.id | strip_namespace | pascal -%}
        {%- if message.schemaurl or message.schema -%}
        {%- set dataType = 'global::' + (( message.schemaurl if message.schemaurl else message.schema) | schema_type( data_project_name, root, message.schemaformat)  | pascal) -%}
        {%- else -%}
        {%- set dataType = "object" -%}
        {%- endif %}   
        Task On{{ pascalDefinitionName | strip_namespace }}Async(CloudEvent cloudEvent, {{ dataType }}? data);
        {%- endfor %}
    }
}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}