{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "mqtt.jinja.include" as mqtt -%}
{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists("format", "cloudevents")) %}
{%- set uses_mqtt_message = (root | exists("binding", "mqtt")) %}
{%- set uses_mqtt_endpoint = (root | exists("protocol", "mqtt")) %}
// This code was generated by the xRegistry tool.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#nullable enable

using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Threading;
using Xunit;
using Microsoft.Extensions.Logging;
using MQTTnet;
using MQTTnet.Client;
using DotNet.Testcontainers.Containers;
using DotNet.Testcontainers.Builders;

using {{ project_name | pascal }};
{%- for messagegroup_key, messagegroup in messagegroups.items() %}
{%- set pascal_group_name = messagegroup.id | pascal %}
using {{ project_name | pascal }}.{{ pascal_group_name | pascal  }};
{%- endfor %}
{%- if uses_cloudevents_message %}
using CloudNative.CloudEvents;
using CloudNative.CloudEvents.SystemTextJson;
{%- endif %}

namespace {{ project_name | pascal }}.Test
{
    public class {{ project_name | pascal }}Fixture : IAsyncLifetime
    {
        public IContainer? MosquittoContainerInstance { get; protected set; }
        public string? MosquittoBrokerHost { get; protected set; }
        public int MosquittoBrokerPort { get; protected set; }
        private ILoggerFactory _loggerFactory;
        private ILogger _logger;

        public ILoggerFactory GetLoggerFactory()
        {
            return _loggerFactory;
        }

        public string TopicName 
        {
            get
            {
                return "testtopic";
            }
        }

        public {{ project_name | pascal }}Fixture()
        {
            _loggerFactory = LoggerFactory.Create(builder =>
            {
                builder.AddDebug().AddConsole();
            });
            _logger = _loggerFactory.CreateLogger<{{ project_name | pascal }}Fixture>();
        }

        private string? mosquittoConfigFilePath = null;
        private string? mosquittoPasswdPath = null;
        private static string mosquittoConfig =
                        "listener 1883\n" +
                        "log_timestamp true\n" +
                        "log_timestamp_format %d-%m-%YT%H:%M:%S\n" +
                        "persistence false\n" +
                        "allow_anonymous true\n" +
                        "password_file /mosquitto/config/mosquitto.passwd\n";
        private static string mosquittoPasswd = "test:$7$101$R3gkC7cVgL8X9vKv$xPZ10eJS1RCp7DE4A2ZHQVRmDP1oB6hV8gFIeyIw7oPNAIO6WaXaKcRaRtiSTeqoKMnrnTR9zKKGaoV3acXlHg==";
        
        public async Task InitializeAsync()
        {
            
            try
            {
                mosquittoConfigFilePath = Path.GetTempFileName();
                File.WriteAllText(mosquittoConfigFilePath, mosquittoConfig);
                mosquittoPasswdPath = Path.GetTempFileName();
                File.WriteAllText(mosquittoPasswdPath, mosquittoPasswd);

                MosquittoContainerInstance = new ContainerBuilder()
                    .WithImage("eclipse-mosquitto:2.0")
                    .WithBindMount(mosquittoConfigFilePath, "/mosquitto/config/mosquitto.conf")
                    .WithBindMount(mosquittoPasswdPath, "/mosquitto/config/mosquitto.passwd")
                    .WithPortBinding(1883, false)
                    .Build();

                await MosquittoContainerInstance.StartAsync();
                _logger.LogDebug("Mosquitto container started.");

                MosquittoBrokerHost = MosquittoContainerInstance.Hostname;
                MosquittoBrokerPort = MosquittoContainerInstance.GetMappedPublicPort(1883);
                _logger.LogDebug($"Mosquitto broker address: {MosquittoBrokerHost}:{MosquittoBrokerPort}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred during InitializeAsync");
                throw;
            }
        }

        public async Task DisposeAsync()
        {
            try
            {
                if (MosquittoContainerInstance != null)
                {
                    await MosquittoContainerInstance.StopAsync();
                }
                if (mosquittoConfigFilePath != null && File.Exists(mosquittoConfigFilePath))
                {
                    File.Delete(mosquittoConfigFilePath);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred during DisposeAsync: {ex.Message}");
            }
        }
    }

    {%- for messagegroup_key, messagegroup in messagegroups.items() %}
    {%- set pascal_group_name = messagegroup.id | pascal %}
    {%- set class_name = "global::" + ( project_name | pascal ) + '.' + (pascal_group_name) + "Producer" %}
    {%- set test_class_name = ( project_name | strip_dots | pascal )+( pascal_group_name | strip_dots )+"ProducerTests" %}
    public class {{ test_class_name }} : IClassFixture<{{ project_name | pascal }}Fixture>
    {
        private readonly {{ project_name | pascal }}Fixture _fixture;
        private readonly ILogger _logger;
        private readonly {{ class_name }} _producer;

        public {{ test_class_name }}({{ project_name | pascal }}Fixture fixture)
        {
            _fixture = fixture;
            _logger = _fixture.GetLoggerFactory().CreateLogger<{{ test_class_name }}>();
            var options = new MqttClientOptionsBuilder()
                .WithTcpServer(_fixture.MosquittoBrokerHost, _fixture.MosquittoBrokerPort)
                .WithProtocolVersion(MQTTnet.Formatter.MqttProtocolVersion.V500)
                .WithClientId("{{ test_class_name }}Client")
                .WithCredentials("test", "password")
                .WithCleanSession()
                .Build();
            var factory = new MqttFactory();
            var client = factory.CreateMqttClient();
            client.ConnectAsync(options).Wait();
            _producer = new {{ class_name }}(client);
        }

#pragma warning disable CS8604 // init takes care of nullables 

        {%- for id, message in messagegroup.messages.items() %}
        {%- set pascal_message_name = message.id | strip_namespace | pascal %}
        {%- set isCloudEvent = not message.format or message.format.lower().startswith("cloudevents") -%}
        {%- set isMqtt = not isCloudEvent and message.format.lower().startswith("mqtt") %}
        [Fact]
        public async Task Test{{ pascal_message_name }}Message()
        {
            _logger.LogInformation("Starting Test{{ pascal_message_name }}Message");
            try
            {   
                {%- if message.schemaurl or message.schema -%}
                {%- set dataType = 'global::' + (( message.schemaurl if message.schemaurl else message.schema) | schema_type( project_name, root, message.schemaformat)  | pascal) -%}
                {%- else -%}
                {%- set dataType = "object" -%}
                {%- endif %}
                {%- if dataType != "object" %}
                {%- if isCloudEvent %}
                {%- set uriargs = cloudEvents.DeclareUriTemplateArguments(message) -%}
                {%- elif isMqtt %}
                {%- set uriargs = mqtt.DeclareUriTemplateArguments(message) -%}
                {%- endif %}
                var eventDataTest = new {{ dataType }}Tests();
                var eventDataInstance = eventDataTest.CreateInstance();
                await _producer.Send{{ pascal_message_name }}Async(_fixture.TopicName, eventDataInstance
                {%- if uriargs -%}
                {%- for arg in uriargs.split(',') if arg.strip() -%}
                , {{ arg.strip().split(' ')[1] -}}: "test"
                {%- endfor -%}
                {%- endif -%}
                );
                {%- else %}
                await _producer.Send{{ pascal_message_name }}Async(_fixture.TopicName, new object()
                {%- if uriargs -%}
                {%- for arg in uriargs.split(',') if arg.strip() -%}
                , {{ arg.strip().split(' ')[1] -}}: "test"
                {%- endfor -%}
                {%- endif -%}
                );
                {%- endif %}
                _logger.LogInformation("Test event sent");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred during Test{{ pascal_message_name }}Message");
                throw;
            }
        }
        {%- endfor %}
    }
    {%- endfor %}
}
