{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "servicebus.jinja.include" as servicebus -%}
{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set uses_amqp_message = (root | exists( "binding", "amqp" )) %}
{%- set uses_amqp_endpoint = (root | exists( "protocol", "amqp" )) %}
{%- set function_name = project_name | pascal -%}
using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Messaging.ServiceBus;
using Microsoft.Extensions.Logging;
{%- if uses_cloudevents_message %}
{{ servicebus.CloudEventsUsings() }}
{%- endif %}
 
namespace {{ project_name | pascal }}
{
    namespace Tools
    {
        public class DispatcherBase
        {
            {{ servicebus.CloudEventsMethods() | indent(12) }}
        }
    }
} 

{% for messagegroup_key, messagegroup in messagegroups.items() -%}
{%- set uses_cloudevents_message = (messagegroup | exists( "format", "cloudevents" )) %}
{%- set uses_plain_amqp_message = (messagegroup | existswithout( "binding", "amqp", "format", "cloudevents" )) %}
{%- set pascalGroupName = messagegroup.id  | pascal -%}
{%- set class_name = ( pascalGroupName | strip_namespace )+"EventDispatcher" %}
namespace {{ pascalGroupName | concat_namespace(project_name) | pascal }} 
{
    public class {{ class_name }} : global::{{ project_name | pascal }}.Tools.DispatcherBase
    {
        {%- if (messagegroup | exists( "format", "cloudevents" )) %}
        
        {%- endif %}
        {%- for id, message in messagegroup.messages.items() -%}
        {%- set pascalDefinitionName = message.id | strip_namespace | pascal -%}
        {%- if message.schemaurl or message.schema -%}
        {%- set dataType = 'global::' + (( message.schemaurl if message.schemaurl else message.schema) | schema_type( project_name, root, message.schemaformat)  | pascal) -%}
        {%- else -%}
        {%- set dataType = "object" -%}
        {%- endif %}
        {%- if message.description %}   
        /// <summary>
        /// {{ message.description }}
        /// </summary>
        {%- endif -%}
        {%- set isCloudEvent = (message | exists( "format", "cloudevents" )) -%}
        {%- set isAmqp = (message | existswithout( "binding", "amqp", "format", "cloudevents" )) %}
        public event Func<ServiceBusReceivedMessage, {%if isCloudEvent%}CloudEvent?, {%endif%}{{dataType}}?, Task>? {{ pascalDefinitionName | strip_namespace }}Async;
        {%- endfor %}

        public async Task ProcessMessageAsync(ProcessMessageEventArgs messageArgs)
        {
            {%- if uses_cloudevents_message %}
            if ( IsCloudEvent(messageArgs.Message) )
            {
                var cloudEvent = CloudEventFromServiceBusMessage(messageArgs.Message);
                await DispatchCloudEventAsync(messageArgs.Message, cloudEvent);
            }
            {%- endif %}
            {%- if uses_amqp_message %}
            var serviceBusMessage = messageArgs.Message;
            if (serviceBusMessage != null)
            {
                await DispatchMessageAsync(serviceBusMessage);
            }
            {%- endif %}
        }
        
        {%- if uses_cloudevents_message %}        
        private async Task DispatchCloudEventAsync(ServiceBusReceivedMessage message, CloudEvent cloudEvent)
        {
            var cloudEventType = cloudEvent.Type;
            switch (cloudEventType)
            {
                {% for id, message in messagegroup.messages.items() -%}
                {%- set pascalDefinitionName = message.id | pascal %}
                {%- set isCloudEvent = (message | exists( "format", "cloudevents" )) -%}
                {%- if message.schemaurl or message.schema -%}
                {%- set dataType = 'global::' + (( message.schemaurl if message.schemaurl else message.schema) | schema_type( project_name, root, message.schemaformat)  | pascal) -%}
                {%- else -%}
                {%- set dataType = "object" -%}
                {%- endif %}
                case "{{ message.id }}":
                    if ({{ pascalDefinitionName | strip_namespace }}Async != null && cloudEvent.Data != null) 
                        {
                            await Task.WhenAll(Array.ConvertAll({{ pascalDefinitionName | strip_namespace }}Async.GetInvocationList(), e => (Task)(e.DynamicInvoke(message,
                            {%- if isCloudEvent %}cloudEvent, {%- endif -%}
                            {%- if dataType != "object" -%}{{ dataType }}.FromData(cloudEvent.Data, cloudEvent.DataContentType){%- else -%}cloudEvent.Data{%- endif %})??Task.CompletedTask)));
                        }
                        break;
                {%- endfor %}
                default:
                    break;
            }
        }
        {%- endif %}

        {%- if uses_plain_amqp_message %}
        private async Task DispatchEventDataAsync(ServiceBusReceivedMessage message)
        {
            var messageSubject = message.GetRawAmqpMessage().Properties.Subject;
            switch (messageSubject)
            {
            {% for id, message in messagegroup.messages.items() if ((message | exists("binding", "amqp" )) and not (message | exists("format", "cloudevents" ))) -%}
            {%- set pascalDefinitionName = message.id | pascal %}
            {%- set isCloudEvent = (message | exists( "format", "cloudevents" )) -%}
            {%- if message.schemaurl or message.schema -%}
            {%- set dataType = 'global::' + (( message.schemaurl if message.schemaurl else message.schema) | schema_type( project_name, root, message.schemaformat)  | pascal) -%}
            {%- else -%}
            {%- set dataType = "object" -%}
            {%- endif %}
                case "{{ message.id }}":
                        if ({{ pascalDefinitionName | strip_namespace }}Async != null) 
                        {
                            await Task.WhenAll(Array.ConvertAll({{ pascalDefinitionName | strip_namespace }}Async.GetInvocationList(), e => (Task)(e.DynamicInvoke(message,
                        {%- if isCloudEvent%}null, {% endif %}
                        {%- if dataType != "object" -%}{{ dataType }}.FromData(eventData.Body, eventData.ContentType){%- else -%} {{ message }}.Data{%- endif %})??Task.CompletedTask)));
                        }
                        break;
            {%- endfor %}
                default:
                    break;
            }
        }
        {%- endif %}

        public static ServiceBusProcessor CreateServiceBusProcessor(ServiceBusClient serviceBusClient, string queueName, ServiceBusProcessorOptions options, {{ class_name }} dispatcher) 
        {       
            var serviceBusProcessor = serviceBusClient.CreateProcessor(queueName, options);
            serviceBusProcessor.ProcessMessageAsync += dispatcher.ProcessMessageAsync;
            return serviceBusProcessor;
        }

        public static ServiceBusProcessor CreateServiceBusProcessor(ServiceBusClient serviceBusClient, string topicName, string subscriptionName, ServiceBusProcessorOptions options, {{ class_name }} dispatcher) 
        {       
            var serviceBusProcessor = serviceBusClient.CreateProcessor(topicName, subscriptionName, options);
            serviceBusProcessor.ProcessMessageAsync += dispatcher.ProcessMessageAsync;
            return serviceBusProcessor;
        }
    }
}
{% endfor %}    


{%- if root.endpoints -%} 
{%- for endpoint_key in root.endpoints.keys() -%}
{%- set endpoint = root.endpoints[endpoint_key] -%}
{%- set pascalGroupName = endpoint.id | default(endpoint_key) | pascal -%}
{%- if endpoint.usage == "consumer" -%}
{%- set protocol = endpoint.config.protocol | lower -%}
{%- if protocol.startswith("amqp") -%}
{%- set options = endpoint.config.options -%}
{%- set endpoints = endpoint.config.endpoints -%}
{%- set messagegroupuris = endpoint.messagegroups %}
{%- macro MessageGroupArgs() -%}
{%- for uri in messagegroupuris %}
{%- set group = schema_object( root, uri ) -%}
{%- if group %}
{%- set groupname = group.id | pascal -%}
global::{{ groupname | concat_namespace(project_name) }}.{{ groupname | strip_namespace }}EventDispatcher? {{ groupname | strip_namespace | camel }}Dispatcher = null
{%- if not loop.last -%}, {%- endif -%}
{%- endif %}
{%- endfor -%}
{%- endmacro -%}    
{%- macro MessageGroupHooks(arg) -%}
Task.WhenAll(
{%- for uri in messagegroupuris %}
{%- set group = schema_object( root, uri ) -%}
{% if group %}
{%- set groupname = group.id | pascal -%}
{{- groupname | strip_namespace | camel }}Dispatcher != null?{{- groupname | strip_namespace | camel }}Dispatcher.ProcessMessageAsync({{ arg }}):Task.CompletedTask
{%- if not loop.last -%}, {%- endif -%}
{%- endif %}
{%- endfor -%}
)
{%- endmacro -%}    


namespace {{ pascalGroupName | namespace(project_name) | pascal  }}
{
    {%- set class_name = ( pascalGroupName | strip_namespace )+"ServiceBusProcessorFactory" %}
    public class {{ class_name }} 
    {
        public static ServiceBusProcessor CreateServiceBusProcessorFor{{ endpoint_key | pascal | strip_namespace }}(ServiceBusClient serviceBusClient, string queueName, ServiceBusProcessorOptions options, {{ MessageGroupArgs() }}) 
        {   
            var serviceBusProcessor = serviceBusClient.CreateProcessor(queueName, options);
            serviceBusProcessor.ProcessMessageAsync += (eventArgs) => {{ MessageGroupHooks("eventArgs") }};
            return serviceBusProcessor;
        }

        public static ServiceBusProcessor CreateEventProcessorClientFor{{ endpoint_key | pascal | strip_namespace }}(ServiceBusClient serviceBusClient, string topicName, string subscriptionName, ServiceBusProcessorOptions options, {{ MessageGroupArgs() }}) 
        {       
            var serviceBusProcessor = serviceBusClient.CreateProcessor(topicName, subscriptionName, options);
            serviceBusProcessor.ProcessMessageAsync += (eventArgs) => {{ MessageGroupHooks("eventArgs") }};
            return serviceBusProcessor;
        }
    }
}
{%- endif -%}
{%- endif -%}
{%- endfor -%}
{% endif %}
