{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "kafka.jinja.include" as kafka -%}
{%- import "util.jinja.include" as util -%}
{{ util.CommonFileHeader() }}
{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists("format", "cloudevents")) %}
{%- set uses_kafka_message = (root | exists("binding", "kafka")) %}
{%- set uses_kafka_endpoint = (root | exists("protocol", "kafka")) %}

#nullable enable

using CloudNative.CloudEvents;
using CloudNative.CloudEvents.SystemTextJson;
using Confluent.Kafka;

{% for messagegroup_key, messagegroup in messagegroups.items() -%}
{%- set pascalGroupName = messagegroup.id | pascal -%}
namespace {{ pascalGroupName | concat_namespace(project_name) | pascal }}
{
    {%- set class_name = (pascalGroupName | strip_namespace) + "EventFactory" %}
    /// <summary>
    /// Factory class to create Confluent Kafka message for the messages declared in the `{{ messagegroup.id }}` message group.
    /// </summary>
    public partial class {{ class_name }}
    {
        private const string cePrefix = "ce_";
        private const string applicationOctetStream = "application/octet-stream";
        private delegate byte[] Serialize<T>(T data, string contentType);
        private static CloudEventFormatter defaultFormatter = new JsonEventFormatter();

        {%- if root.endpoints -%}
        {%- for endpoint_key in root.endpoints.keys() -%}
        {%- set endpoint = root.endpoints[endpoint_key] -%}
        {%- if endpoint.usage == "producer" -%}
        {%- set protocol = endpoint.config.protocol | lower -%}
        {%- if protocol == "kafka" -%}
        {%- set options = endpoint.config.options -%}
        {%- set endpoints = endpoint.config.endpoints %}
        {%- macro createforbody(class_name, endpoints, options) -%}
            var config = new ProducerConfig
            {
                BootstrapServers = endpoints?.FirstOrDefault()?.uri ?? throw new ArgumentNullException(nameof(bootstrapServers))
            };
            return new ProducerBuilder<byte[], byte[]>(config).Build();
        {%- endmacro %}
        
        /// <summary>
        /// Create a new instance for the {{ endpoint_key }} endpoint.
        /// </summary>
        /// <returns>A new instance of the `IProducer<byte[], byte[]>`.</returns>
        public static IProducer<byte[], byte[]> CreateFor{{ endpoint_key | pascal | strip_namespace }}() 
        {   
            {{ createforbody(class_name, endpoints, options) }}
        }
        {%- endif -%}
        {%- endif -%}
        {%- endfor -%}
        {% endif %}

        /// <summary>
        /// Create an instance for the specified message.
        /// </summary>
        /// <typeparam name="T">The type of the message data.</typeparam>
        /// <param name="cloudEvent">The CloudEvent instance to use for the message.</param>
        /// <param name="data">The message data.</param>
        /// <param name="contentType">The content type of the message data.</param>
        /// <param name="bodySerializer">The serializer to use for the message data.</param>
        /// <param name="formatter">The CloudEvent formatter to use for the message.</param>
        /// <returns>A `Message&lt;byte[], byte[]&gt;` instance for the specified message.</returns>
        private static Message<byte[], byte[]> CreateMessage<T>(CloudEvent? cloudEvent, T data, string contentType, Serialize<T>? bodySerializer = null, CloudEventFormatter? formatter = null) where T : notnull
        {
            if (formatter == null)
            {
                bool isRawBytes = typeof(T) == typeof(byte[]);
                if (bodySerializer == null && !isRawBytes)
                {
                    throw new ArgumentNullException(nameof(bodySerializer));
                }
                var eventPayload = bodySerializer == null ? (byte[])(object)data : bodySerializer(data, contentType);
                var message = new Message<byte[], byte[]>
                {
                    Value = eventPayload,
                    Headers = new Headers() {
                        new Header("content-type", System.Text.Encoding.UTF8.GetBytes(contentType))
                    }
                };
                if (cloudEvent != null)
                {
                    foreach (var attr in cloudEvent.GetPopulatedAttributes())
                    {
                        var attrValue = attr.Value switch
                        {
                            string s => s,
                            Uri u => u.ToString(),
                            _ => attr.Value.ToString()
                        };
                        if ( attrValue != null)
                        {
                            message.Headers.Add(cePrefix + attr.Key.Name, System.Text.Encoding.UTF8.GetBytes(attrValue));
                        }
                    }
                }
                return message;
            }
            else
            {
                if (cloudEvent == null)
                {
                    throw new ArgumentNullException(nameof(cloudEvent));
                }
                if (formatter is CloudNative.CloudEvents.SystemTextJson.JsonEventFormatter && 
                    new System.Net.Mime.ContentType(contentType).MediaType == System.Net.Mime.MediaTypeNames.Application.Json)
                {
                    cloudEvent.Data = data;
                }
                else
                {
                    bool isRawBytes = typeof(T) == typeof(byte[]);
                    if (bodySerializer == null && !isRawBytes)
                    {
                        throw new ArgumentNullException(nameof(bodySerializer));
                    }
                    cloudEvent.Data = bodySerializer == null ? data : bodySerializer(data, contentType);
                }
                var eventBody = formatter.EncodeStructuredModeMessage(cloudEvent, out var eventContentType);
                var message = new Message<byte[], byte[]>
                {
                    Value = eventBody.ToArray(),
                    Headers = new Headers() {
                        new Header("content-type", System.Text.Encoding.UTF8.GetBytes(eventContentType.ToString()))
                    }
                };
                return message;
            }
        }

        {% for id in messagegroup.messages -%}
        {%- set message = messagegroup.messages[id] -%}
        {%- set pascal_message_name = message.id | pascal %}
        {%- set is_cloudevent = not message.format or message.format.lower().startswith("cloudevents") -%}
        {%- set isKafka = not is_cloudevent and message.format.lower().startswith("kafka") %}
        {%- set type_name = util.body_type(data_project_name, root, message) -%}
        {%- if is_cloudevent %}
        {%- set uriargs = cloudEvents.DeclareUriTemplateArguments(message) -%}
        {%- elif isKafka %}
        {%- set uriargs = kafka.DeclareUriTemplateArguments(message) -%}
        {%- endif %}
        /// <summary>
        /// Create a `Message&lt;byte[], byte[]&gt;` instance for the `{{ pascal_message_name }}` event
        {%- if message.description %}
        /// Event description: "{{ message.description }}"
        {%- endif %}
        /// </summary>
        /// <param name="data">The event data object.</param>
        {%- if uriargs %}
        {%- for arg in uriargs.split(',') if arg.strip() %}
        {%- set splitarg = arg.strip().split(' ')%}
        /// <param name="{{ splitarg[1] }}"> URI template argument</param>
        {%- endfor %}
        {%- endif %}
        /// <param name="contentType">The desired content type of the message data.</param>
        {%- if is_cloudevent %}
        /// <param name="formatter">The CloudEvent formatter to use for structured mode, e.g. JsonEventFormatter.</param>
        {%- endif %}
        /// <returns>A `Message&lt;byte[], byte[]&gt;` instance for the {{ pascal_message_name }} message.</returns>
        public static Message<byte[], byte[]> Create{{ pascal_message_name | strip_namespace }}Message(
        {{ type_name }} data
        {%- if uriargs -%}
        {{- uriargs -}}
        {%- endif -%}
        {%- if is_cloudevent and "datacontenttype" in message.metadata and "value" in message.metadata["datacontenttype"] -%}
        , string contentType = "{{ message.metadata["datacontenttype"]["value"] }}"
        {%- else -%}
        , string contentType = System.Net.Mime.MediaTypeNames.Application.Json
        {%- endif %}
        {%- if is_cloudevent %}, CloudEventFormatter? formatter = null{% endif %})
        {
            {% if type_name != "byte[]" %}
            Serialize<{{ type_name }}>? bodySerializer = (formatter != null) ? null : ({{ type_name }} data, string contentType) => {
                return data.ToByteArray(contentType);
            };
            {%- if is_cloudevent %}
            {{ cloudEvents.DeclareCloudNativeCloudEvent("cloudEvent", message) | indent(12) }}
            return CreateMessage(cloudEvent, data, contentType, bodySerializer, formatter);
            {%- elif isKafka %}
            return CreateMessage(null, data, contentType, bodySerializer, null);
            {%- endif %}
            {% else %}
            {%- if is_cloudevent %}
            {{ cloudEvents.DeclareCloudNativeCloudEvent("cloudEvent", message) | indent(12) }}
            return CreateMessage(cloudEvent, data, contentType, null, formatter);
            {%- elif isKafka %}
            return CreateMessage(null, data, contentType, null, null);
            {%- endif %}
            {% endif %}
            
        }
        {% endfor %}
    }
}
{% endfor -%}
