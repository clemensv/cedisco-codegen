{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "amqp.jinja.include" as amqp -%}
{%- import "util.jinja.include" as util -%}
{{ util.CommonFileHeader() }}

{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists("envelope","CloudEvents/1.0")) %}
{%- set uses_amqp_message = amqp.uses_amqp_protocol(root) %}
{%- set uses_amqp_endpoint = amqp.uses_amqp_endpoint(root) %}
using CloudNative.CloudEvents;
using CloudNative.CloudEvents.SystemTextJson;
{%- if uses_amqp_message %}
{{ amqp.AmqpNetLiteHeaders() }}
{%- endif %}
using Microsoft.Extensions.Logging;
 
{% for messagegroupid, messagegroup in messagegroups.items() -%}
{%- set groupname = messagegroupid  | pascal -%}
namespace {{ project_name | pascal }}
{
    {%- set class_name = ( groupname | strip_namespace )+"EventProducer" %}
     public partial class {{ class_name }}
     {
        
         {%- if uses_cloudevents_message %}
         private readonly ContentMode contentMode;
         private readonly CloudEventFormatter formatter;
         public event EventHandler<CloudEvent>? BeforeSend;
         {%- endif %}
         private readonly AmqpProducer endpoint;

 
         private {{ class_name }}(AmqpProducer endpoint{%- if uses_cloudevents_message -%}, ContentMode contentMode, CloudEventFormatter formatter{%- endif -%})
         {
            {%- if uses_cloudevents_message %}
             this.contentMode = contentMode;
             this.formatter = formatter;
            {%- endif %}
             this.endpoint = endpoint;
         }
 
         {%- if root.endpoints -%} 
         {%- for endpointid, endpoint in root.endpoints.items() -%}
           {%- if endpoint.usage == "producer" -%}
           {%- set protocol = endpoint.protocol | lower -%}
           {%- set options = endpoint.protocoloptions -%}
           {%- set endpoints = endpoint.endpoints %}
        public static {{ class_name }} CreateProducerFor{{ endpointid | pascal | strip_namespace }}(ILogger logger, EndpointCredential credential {% if uses_cloudevents_message %}, ContentMode contentMode, CloudEventFormatter formatter {% endif %}) 
        {       
            {%- if options %}
            var options = new Dictionary<string, string> {
            {%- for key, value in options.items()%}
                { "{{ key }}" , "{{ value }}" }
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            {%- endif %}
            var endpoints = new List<Uri> {
            {%- for epo in endpoints %}
                new Uri("{{ epo.uri }}")
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            return new {{ class_name }}(new AmqpProducer(logger, credential, {% if options %}options, {% else %}new Dictionary<string, string>(), {% endif %}endpoints){%- if uses_cloudevents_message %}, contentMode, formatter{%- endif %});
        }
        {%- endif -%}
        {%- endfor -%}
        {% endif %}

        public static {{ class_name }} CreateProducer(ILogger logger, EndpointCredential credential{% if uses_cloudevents_message %}, ContentMode contentMode, CloudEventFormatter formatter{% endif %}, Dictionary<string, string> options, List<Uri> endpoints)
        {
            return new {{ class_name }}(new AmqpProducer(logger, credential, options, endpoints){%- if uses_cloudevents_message %}, contentMode, formatter{%- endif %});
        }
        
        {% for messageid, message in messagegroup.messages.items() -%}
        {%- set messagename = messageid | pascal %}
        {%- set isCloudEvent = cloudEvents.isCloudEvent(message) %}
        {%- set is_amqp = amqp.is_amqp(message) %}
        public async Task Send{{ messagename | strip_namespace }}Async(
        {{- util.body_type(data_project_name, root, message) }} data    
        {%- if isCloudEvent -%}
        {{- cloudEvents.DeclareUriTemplateArguments(message) -}}
        {%- elif is_amqp -%}
        {{- amqp.DeclareUriTemplateArguments(message) -}}
        {%- endif -%}
        {%- if isCloudEvent and "datacontenttype" in message.envelopemetadata and "value" in message.envelopemetadata["datacontenttype"] -%}
        , string contentType = "{{ message.envelopemetadata["datacontenttype"]["value"] }}"
        {%- else -%}
        , string contentType = System.Net.Mime.MediaTypeNames.Application.Json
        {%- endif %}
        {%- if isCloudEvent %}, CloudEventFormatter? formatter = null{% endif %})
        {
            {% if isCloudEvent %}
            {{ cloudEvents.DeclareCloudNativeCloudEvent("cloudEvent", message) | indent(12)}}
            cloudEvent.Data = {% if message.schemauri -%}
            {%- set schemaObj = schema_object(root, message.schemauri ) -%}
            {%- if schemaObj and "format" in schemaObj and not schemaObj.format.lower().startswith("json") -%}
            data.ToByteArray(contentType)
            {%- else -%}
            data
            {%- endif -%}
            {%- else -%}data{%- endif %};
            cloudEvent.DataContentType = contentType;
            if (BeforeSend != null)
            {
                BeforeSend(this, cloudEvent);
            }
            await endpoint.SendAsync(cloudEvent, contentMode, formatter);
            {% elif is_amqp %}
            {{- amqp.DeclareAmqpNetLiteMessage("amqpMessage", message) | indent(12)}}
            amqpMessage.BodySection = new Data() { Binary = data.ToByteArray(contentType) };
            await ((AmqpProducer)endpoint).SendAsync(amqpMessage);
            {%- endif %}
        }
        {% endfor %}
    }
}
{% endfor -%}