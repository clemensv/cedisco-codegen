{%- import "cloudevents.jinja.include" as cloudEvents %}
{%- import "mqtt.jinja.include" as mqtt %}
{%- import "util.jinja.include" as util -%}
{{ util.CommonFileHeader() }}
{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set uses_plain_mqtt_message = (root | exists( "binding", "mqtt" )) %}
{%- set uses_mqtt_endpoint = (root | exists( "protocol", "mqtt" )) %}

#nullable enable

using MQTTnet;
using MQTTnet.Client;
using Microsoft.Extensions.Logging;
using {{ project_name | pascal }}.Tools;
{%- if uses_cloudevents_message %}
{{ mqtt.CloudEventsUsings() }}
{%- endif %}

namespace {{ project_name | pascal }}
{
    {% for messagegroup_key, messagegroup in messagegroups.items() -%}
    {%- set uses_cloudevents_message = (messagegroup | exists( "format", "cloudevents" )) %}
    {%- set uses_plain_mqtt_message = (messagegroup | exists( "binding", "mqtt" )) %}
    {%- set pascalGroupName = messagegroup.id  | pascal -%}
    {%- set class_name = ( pascalGroupName | strip_namespace )+"Dispatcher" %}
    namespace {{ pascalGroupName | pascal  }}
    {
        /// <summary>
        /// Dispatcher class for processing messages from an MQTT topic.
        /// </summary>
        public class {{ class_name }} : DispatcherBase, IDisposable
        {
            private readonly MqttSubscriber _subscriber;
            {%- for id, message in messagegroup.messages.items() -%}
            {%- set pascal_message_name = message.id | strip_namespace | pascal -%}
            {%- set message_body_type = util.body_type(data_project_name, root, message) -%}
            {%- if message.description %}
            /// <summary>
            /// {{ message.description }}
            /// </summary>
            {%- endif %}
            {%- set isCloudEvent = cloudEvents.isCloudEvent(message) %}
            {%- set isMqtt = (message | exists( "binding", "mqtt" )) %}
            /// <summary>
            /// Event that is raised when a message of type {{ pascal_message_name }} is received.
            /// </summary>
            public event Func<MqttApplicationMessage, {% if isCloudEvent %}CloudEvent?, {% endif %}{{ message_body_type }}?, Task>? {{ pascal_message_name | strip_namespace }}Async;
            {%- endfor %}
            /// <summary>
            /// Event that is raised when an unhandled message is received.
            /// </summary>
            public event Func<MqttApplicationMessage, Task>? UnhandledMessageAsync;

            /// <summary>   
            /// Initializes a new instance of the <see cref="{{ class_name }}"/> class.
            /// </summary>
            /// <param name="subscriber">The MQTT subscriber to use.</param>
            /// <param name="loggerFactory">The logger factory to use.</param>
            public {{ class_name }}(MqttSubscriber subscriber, ILoggerFactory? loggerFactory = null) : base(loggerFactory?.CreateLogger<{{ class_name }}>() ?? new LoggerFactory().CreateLogger<{{ class_name }}>())
            {
                _subscriber = subscriber;
                _subscriber.Attach(this);
            }

            void IDisposable.Dispose()
            {
                _subscriber.Detach(this);
            }            

            /// <summary>
            /// Processes a message from the MQTT topic
            /// </summary>
            /// <param name="messageArgs">The message to process.</param>
            internal override async Task<bool> ProcessMessageAsync(MqttApplicationMessage messageArgs)
            {
                _logger.LogInformation($"Processing MQTT message on topic {messageArgs.Topic}");
                {%- if uses_cloudevents_message %}
                if (IsCloudEvent(messageArgs))
                {
                    var cloudEvent = CloudEventFromMessage(messageArgs);
                    if (await DispatchCloudEventAsync(messageArgs, cloudEvent))
                    {
                        return true;
                    }
                }
                {%- else %}
                var message = messageArgs;
                if (message != null)
                {
                    if (await DispatchMessageAsync(messageArgs))
                    {
                        return true;
                    }
                }
                {%- endif %}
                if (UnhandledMessageAsync != null)
                {
                    await UnhandledMessageAsync(messageArgs);
                }
                return false;
            }

            {%- if uses_cloudevents_message %}
            /// <summary>
            /// Dispatches a CloudEvent to the appropriate handler.
            /// </summary>
            /// <param name="messageArgs">The message to dispatch.</param>
            /// <param name="cloudEvent">The CloudEvent to dispatch.</param>
            protected virtual async Task<bool> DispatchCloudEventAsync(MqttApplicationMessage messageArgs, CloudEvent cloudEvent)
            {
                var cloudEventType = cloudEvent.Type;
                _logger.LogInformation($"Dispatching CloudEvent of type {cloudEventType}");
                switch (cloudEventType)
                {
                    {% for id, message in messagegroup.messages.items() -%}
                    {%- set pascal_message_name = message.id | pascal %}
                    {%- set isCloudEvent = cloudEvents.isCloudEvent(message) %}
                    {%- set message_body_type = util.body_type(data_project_name, root, message) -%}
                    case "{{ message.id }}":
                        if ({{ pascal_message_name | strip_namespace }}Async != null)
                        {
                            await Task.WhenAll(Array.ConvertAll({{ pascal_message_name | strip_namespace }}Async.GetInvocationList(), e => (Task)(e.DynamicInvoke(messageArgs,
                            {%- if isCloudEvent %}cloudEvent, {%- endif %}
                            {%- if message_body_type != "byte[]" -%}{{ message_body_type }}.FromData(cloudEvent.Data, cloudEvent.DataContentType)
                            {%- else -%}
                            cloudEvent.Data is BinaryData binaryData ? binaryData.ToArray() : null
                            {%- endif %}))));
                        }
                        return true;
                    {%- endfor %}
                    default:
                        return false;
                }
            }
            {%- endif %}

            {%- if uses_plain_mqtt_message %}
            /// <summary>
            /// Dispatches a message to the appropriate handler.
            /// </summary>
            /// <param name="messageArgs">The message to dispatch.</param>
            protected virtual async Task<bool> DispatchMessageAsync(MqttApplicationMessage messageArgs)
            {
                var messageTopic = messageArgs.Topic;
                _logger.LogInformation($"Dispatching MQTT message on topic {messageTopic}");
                switch (messageTopic)
                {
                {% for id, message in messagegroup.messages.items() if ((message | exists("binding", "mqtt" )) and not (message | exists("format", "cloudevents" ))) -%}
                {%- set pascal_message_name = message.id | pascal %}
                {%- set isCloudEvent = cloudEvents.isCloudEvent(message) %}
                {%- set message_body_type = util.body_type(data_project_name, root, message) -%}
                    case "{{ message.message.properties.topic.value }}":
                        if ({{ pascal_message_name | strip_namespace }}Async != null)
                        {
                            await Task.WhenAll(Array.ConvertAll({{ pascal_message_name | strip_namespace }}Async.GetInvocationList(), e => (Task)(e.DynamicInvoke(messageArgs,
                        {%- if isCloudEvent %}null, {% endif %}
                        {%- if message_body_type != "byte[]" -%}
                        {{ message_body_type }}.FromData(messageArgs.Payload, messageArgs.ContentType)
                        {%- else -%}
                        messageArgs.Payload.ToObject<{{ message_body_type }}>()
                        {%- endif %}) )));
                        }
                        return true;
                {%- endfor %}
                    default:
                        return false;
                }
            }
            {%- endif %}
        }
    }

    {% endfor %}

    {%- if root.endpoints -%}
    {%- for endpoint_key in root.endpoints.keys() -%}
    {%- set endpoint = root.endpoints[endpoint_key] -%}
    {%- set pascalGroupName = endpoint.id | default(endpoint_key) | pascal -%}
    {%- if endpoint.usage == "consumer" -%}
    {%- set protocol = endpoint.config.protocol | lower -%}
    {%- if protocol.startswith("mqtt") -%}
    {%- set options = endpoint.config.options -%}
    {%- set endpoints = endpoint.config.endpoints -%}
    {%- set messagegroupuris = endpoint.messagegroups %}
    {%- macro MessageGroupArgs() -%}
    {%- for uri in messagegroupuris %}
    {%- set group = schema_object( root, uri ) -%}
    {%- if group %}
    {%- set groupname = group.id | pascal -%}
    {{ groupname }}EventDispatcher? {{ groupname | strip_namespace | camel }}Dispatcher = null
    {%- if not loop.last -%}, {%- endif -%}
    {%- endif %}
    {%- endfor %}
    {%- endmacro -%}
    {%- macro MessageGroupHooks(arg) -%}
    Task.WhenAll(
    {%- for uri in messagegroupuris %}
    {%- set group = schema_object( root, uri ) -%}
    {% if group %}
    {%- set groupname = group.id | pascal -%}
    {{- groupname | strip_namespace | camel }}Dispatcher != null?{{- groupname | strip_namespace | camel }}Dispatcher.ProcessMessageAsync({{ arg }}):Task.CompletedTask
    {%- if not loop.last -%}, {%- endif -%}
    {%- endif %}
    {%- endfor %}
    )
    {%- endmacro %}

    namespace {{ pascalGroupName | concat_namespace(project_name) | pascal }}
    {
        {%- set class_name = ( pascalGroupName | strip_namespace )+"MqttProcessorFactory" %}
        /// <summary>
        /// Factory class for creating MqttSubscriber instances for the {{ pascalGroupName }} endpoint.
        /// </summary>
        public class {{ class_name }}
        {
            /// <summary>
            /// Creates an MqttSubscriber instance for the {{ pascalGroupName }} endpoint.
            /// </summary>
            /// <param name="options">The MqttClientOptions to use for the MqttSubscriber.</param>
            /// <param name="topics">The topics to subscribe to.</param>
            public static MqttSubscriber CreateMqttProcessorFor{{ endpoint_key | pascal | strip_namespace }}(IMqttClient client, string[] topics, {{ MessageGroupArgs() }})
            {
                var subscriber = new MqttSubscriber(client, options, topics);
                {%- for uri in messagegroupuris %}
                {%- set group = schema_object( root, uri ) -%}
                {%- if group %}
                {%- set groupname = group.id | pascal -%}
                if ({{ groupname | strip_namespace | camel }}Dispatcher != null)
                {
                    subscriber.Attach({{ groupname | strip_namespace | camel }}Dispatcher);
                }
                {%- endif %}
                {%- endfor %}
                return subscriber;
            }
        }
    }

    {%- endif -%}
    {%- endif -%}
    {%- endfor -%}
    {%- endif %}

    {%- set dispatcherBase = "global::"+( project_name | pascal )+".Tools.DispatcherBase" %}
    /// <summary>
    /// Extensions for the MqttSubscriber class to attach and detach dispatchers.
    /// </summary>
    public static class {{ project_name | pascal | strip_dots }}SubscriberExtensions
    {
        private static readonly Dictionary<MqttSubscriber, List<{{ dispatcherBase }}>> Dispatchers =
            new Dictionary<MqttSubscriber, List<{{ dispatcherBase }}>>();

        /// <summary>
        /// Attaches a dispatcher to the MqttSubscriber.
        /// </summary>
        /// <param name="subscriber">The MqttSubscriber to attach the dispatcher to.</param>
        /// <param name="dispatcher">The dispatcher to attach.</param>
        public static void Attach(this MqttSubscriber subscriber, {{ dispatcherBase }} dispatcher)
        {
            if (!Dispatchers.ContainsKey(subscriber))
            {
                Dispatchers[subscriber] = new List<{{ dispatcherBase }}>();
                subscriber.ProcessMessage += async (messageArgs) => await ProcessMessageAsync(subscriber, messageArgs);
                subscriber.ProcessError += async (error) => await ProcessErrorAsync(subscriber, error);
            }
            Dispatchers[subscriber].Add(dispatcher);
        }

        /// <summary>
        /// Detaches a dispatcher from the MqttSubscriber.
        /// </summary>
        /// <param name="subscriber">The MqttSubscriber to detach the dispatcher from.</param>
        /// <param name="dispatcher">The dispatcher to detach.</param>
        public static void Detach(this MqttSubscriber subscriber, {{ dispatcherBase }} dispatcher)
        {
            if (Dispatchers.ContainsKey(subscriber))
            {
                Dispatchers[subscriber].Remove(dispatcher);
                if (Dispatchers[subscriber].Count == 0)
                {
                    Dispatchers.Remove(subscriber);
                }
            }
        }

        private static async Task ProcessMessageAsync(MqttSubscriber subscriber, MqttApplicationMessage messageArgs)
        {
            foreach (var dispatcher in Dispatchers[subscriber])
            {
                if (await dispatcher.ProcessMessageAsync(messageArgs))
                {
                    return;
                }
            }
        }

        private static async Task ProcessErrorAsync(MqttSubscriber subscriber, Exception error)
        {
            foreach (var dispatcher in Dispatchers[subscriber])
            {
                await dispatcher.ProcessErrorAsync(error);
            }
        }
    }
 
}
