{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "amqp.jinja.include" as amqp -%}
{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set uses_amqp_message = (root | exists( "binding", "amqp" )) %}
{%- set uses_amqp_endpoint = (root | exists( "protocol", "amqp" )) %}
// This code was generated by the xRegistry tool.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#nullable enable

using CloudNative.CloudEvents;
using CloudNative.CloudEvents.SystemTextJson;
using Azure.Messaging.EventHubs;
using Azure.Messaging.EventHubs.Producer;

{% for messagegroup_key, messagegroup in messagegroups.items() -%}
{%- set pascalGroupName = messagegroup.id  | pascal -%}
namespace {{ pascalGroupName | namespace(project_name) | pascal }}
{
    {%- set class_name = ( pascalGroupName | strip_namespace )+"Producer" %}
    /// <summary>
    /// Producer class to send events in the `{{ messagegroup.id }}` message group.
    /// </summary>
    public partial class {{ class_name }}
    {
        {%- if root.endpoints -%} 
        {%- for endpoint_key in root.endpoints.keys() -%}
        {%- set endpoint = root.endpoints[endpoint_key] -%}
        {%- if endpoint.usage == "producer" -%}
        {%- set protocol = endpoint.config.protocol | lower -%}
        {%- if protocol == "amqp" -%}
        {%- set options = endpoint.config.options -%}
        {%- set endpoints = endpoint.config.endpoints %}
        {%- macro createforbody(class_name, endpoints, options) -%}
            if ( fullyQualifiedNamespace == null )
            {
                {%- if endpoints %}
                fullyQualifiedNamespace = "{{ endpoints[0].uri }}";
                {%- else %}
                throw new ArgumentNullException(nameof(fullyQualifiedNamespace));
                {%- endif %}
            }
            if ( eventHubName == null )
            {
                {%- if options and 'node' in options %}
                eventHubName = "{{ options['node'] }}";
                {%- else %}
                throw new ArgumentNullException(nameof(eventHubName));
                {%- endif %}
            }
            var client = new EventHubProducerClient(fullyQualifiedNamespace, eventHubName, credential);
            return {{ class_name }}(client);
        {%- endmacro %}
        
        /// <summary>
        /// Create a new instance of the `EventHubProducerClient` for the {{ endpoint_key }} endpoint.
        /// </summary>
        /// <param name="credential">The Azure credential to use for authentication.</param>
        /// <param name="fullyQualifiedNamespace">The fully qualified namespace of the Event Hub.</param>
        /// <param name="eventHubName">The name of the Event Hub.</param>
        /// <returns>A new instance of the `EventHubProducerClient`.</returns>
        public static {{ class_name }} CreateFor{{ endpoint_key | pascal | strip_namespace }}(TokenCredential credential, string? fullyQualifiedNamespace = null, string? eventHubName = null) 
        {   
            {{ createforbody(class_name, endpoints, options) }}
        }

        /// <summary>
        /// Create a new instance of the `EventHubProducerClient` for the {{ endpoint_key }} endpoint.
        /// </summary>
        /// <param name="credential">The Azure credential to use for authentication.</param>
        /// <param name="fullyQualifiedNamespace">The fully qualified namespace of the Event Hub.</param>
        /// <param name="eventHubName">The name of the Event Hub.</param>
        /// <returns>A new instance of the `EventHubProducerClient`.</returns>
        public static {{ class_name }} CreateFor{{ endpoint_key | pascal | strip_namespace }}(AzureNamedKeyCredential credential, string? fullyQualifiedNamespace = null, string? eventHubName = null) 
        {       
            {{ createforbody(class_name, endpoints, options) }}
        }

        /// <summary>
        /// Create a new instance of the `EventHubProducerClient` for the {{ endpoint_key }} endpoint.
        /// </summary>
        /// <param name="credential">The Azure credential to use for authentication.</param>
        /// <param name="fullyQualifiedNamespace">The fully qualified namespace of the Event Hub.</param>
        /// <param name="eventHubName">The name of the Event Hub.</param>
        /// <returns>A new instance of the `EventHubProducerClient`.</returns>
        public static {{ class_name }} CreateFor{{ endpoint_key | pascal | strip_namespace }}(AzureSasCredential credential, string? fullyQualifiedNamespace = null, string? eventHubName = null) 
        {       
            {{ createforbody(class_name, endpoints, options) }}
        }
        {%- endif -%}
        {%- endif -%}
        {%- endfor -%}
        {% endif %}

        /// <summary>
        /// Constructor
        /// </summary>
        public {{ class_name }}(EventHubProducerClient client)
        {
            this.Client = client;
        }

        /// <summary>
        /// Event Hub producer client
        /// </summary>
        public EventHubProducerClient Client
        {
            get; private set;
        }

        {% for id in messagegroup.messages -%}
        {%- set message = messagegroup.messages[id] -%}
        {%- set pascalDefinitionName = message.id | pascal %}
        {%- set isCloudEvent = not message.format or message.format.lower().startswith("cloudevents") -%}
        {%- set isAmqp = not isCloudEvent and message.format.lower().startswith("amqp") %}
        {%- if message.schemaurl or message.schema -%}
        {%- set type_name = 'global::' + ((message.schemaurl if message.schemaurl else message.schema) | schema_type( project_name, root, message.schemaformat) | pascal )  %}
        {%- if message.schemaformat.lower().startswith("jsonschema") %}
        {%- set type_name = type_name | pascal %}
        {%- endif %}
        {%- else -%}
        {%- set type_name = "object" %}
        {%- endif -%}
        {%- if isCloudEvent %}
        {%- set uriargs = cloudEvents.DeclareUriTemplateArguments(message) -%}
        {%- elif isAmqp %}
        {%- set uriargs = amqp.DeclareUriTemplateArguments(message) -%}
        {%- endif %}
        /// <summary>
        /// Publish the `{{ pascalDefinitionName }}` event
        {%- if message.description %}
        /// Event description: "{{ message.description }}"
        {%- endif %}
        /// </summary>
        /// <param name="data">The event data object.</param>
        {%- if uriargs %}
        {%- for arg in uriargs.split(',') if arg.strip() %}
        {%- set splitarg = arg.strip().split(' ')%}
        /// <param name="{{ splitarg[1] }}"> URI template argument</param>
        {%- endfor %}
        {%- endif %}
        /// <param name="contentType">The desired content type of the message data.</param>
        {%- if isCloudEvent %}
        /// <param name="formatter">The CloudEvent formatter to use for structured mode, e.g. JsonEventFormatter.</param>
        {%- endif %}
        /// <returns>An `EventData` instance for the {{ pascalDefinitionName }} message.</returns>
        public Task Send{{ pascalDefinitionName | strip_namespace }}Async(
        {{ type_name }} data
        {%- if uriargs -%}
        {{- uriargs -}}
        {%- endif -%}
        {%- if isCloudEvent and "datacontenttype" in message.metadata and "value" in message.metadata["datacontenttype"] -%}
        , string contentType = "{{ message.metadata["datacontenttype"]["value"] }}"
        {%- else -%}
        , string contentType = System.Net.Mime.MediaTypeNames.Application.Json
        {%- endif %}
        {%- if isCloudEvent %}, CloudEventFormatter? formatter = null{% endif %})
        {
            var eventData = {{pascalGroupName | strip_namespace}}EventFactory.Create{{ pascalDefinitionName | strip_namespace }}Event(data,
                {%- if uriargs %}
                {%- for arg in uriargs.split(',') if arg.strip() %}
                {%- set splitarg = arg.strip().split(' ')%}
                {{- splitarg[1] -}},
                {%- endfor -%}
                {%- endif -%}
                contentType
                {%- if isCloudEvent %}, formatter{% endif -%}
            );
            return this.Client.SendAsync(new []{eventData});
        }

        /// <summary>
        /// Send a batch of `{{ pascalDefinitionName }}` events
        {%- if message.description %}
        /// Event description: "{{ message.description }}"
        {%- endif %}
        /// </summary>
        /// <param name="data">The event data objects.</param>
        {%- if uriargs %}
        {%- for arg in uriargs.split(',') if arg.strip() %}
        {%- set splitarg = arg.strip().split(' ')%}
        /// <param name="{{ splitarg[1] }}"> URI template argument</param>
        {%- endfor %}
        {%- endif %}
        /// <param name="contentType">The desired content type of the message data.</param>
        {%- if isCloudEvent %}
        /// <param name="formatter">The CloudEvent formatter to use for structured mode, e.g. JsonEventFormatter.</param>
        {%- endif %}
        /// <returns>Task object</returns>
        public async Task Send{{ pascalDefinitionName | strip_namespace }}BatchAsync(
        {{ type_name }}[] data
        {%- if uriargs -%}
        {{- uriargs -}}
        {%- endif -%}
        {%- if isCloudEvent and "datacontenttype" in message.metadata and "value" in message.metadata["datacontenttype"] -%}
        , string contentType = "{{ message.metadata["datacontenttype"]["value"] }}"
        {%- else -%}
        , string contentType = System.Net.Mime.MediaTypeNames.Application.Json
        {%- endif %}
        {%- if isCloudEvent %}, CloudEventFormatter? formatter = null{% endif %})
        {
            var batch = await this.Client.CreateBatchAsync();
            foreach( var record in data )
            {
                var eventData = {{pascalGroupName | strip_namespace}}EventFactory.Create{{ pascalDefinitionName | strip_namespace }}Event(record, 
                {%- if uriargs %}
                {%- for arg in uriargs.split(',') if arg.strip() %}
                {%- set splitarg = arg.strip().split(' ')%}
                {{- splitarg[1] -}},
                {%- endfor -%}
                {%- endif -%}
                contentType, formatter);
                if ( !batch.TryAdd(eventData))
                {
                    await this.Client.SendAsync(batch);
                    batch = await this.Client.CreateBatchAsync();
                    batch.TryAdd(eventData);
                }
            }
            if (batch.Count > 0)
            {
                await this.Client.SendAsync(batch);
            }
        }
        {% endfor %}
    }
}
{% endfor -%}