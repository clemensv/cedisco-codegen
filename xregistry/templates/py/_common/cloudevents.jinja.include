# cloudevents.jinja.include

# CloudEvents macros

# Generates a list of arguments for "send" methods that correspond to placeholders in uritemplates
{%- macro DeclareUriTemplateArguments(message) -%}
{%- for attrname in message.metadata if attrname not in ["datacontenttype", "dataschema"] -%}
{%- set attribute = message.metadata[attrname] -%}
    {%- if attribute.type == "uritemplate" -%}
        {%- for placeholder in attribute.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
        , {{ placeholder }}
        {%- endfor -%}
    {%- elif attribute.value is not defined -%}
        {%- if not attrname == "time" and not attrname == "id" -%}
        , {{ attrname }}=None
        {%- endif -%}
    {%- endif -%}
{%- endfor -%}
{%- endmacro -%}

# Generates a CloudEvent object from cloudEventDefinition as message
{%- macro DeclareCloudNativeCloudEvent(variable, message) -%}
cloud_event = {
    "datacontenttype": content_type,
    "dataschema": "{{message.schemaurl.lstrip('#/')}}" if "{{message.schemaurl}}" else None,
    "subject": "{{message.metadata['subject'].value}}" if "{{message.metadata['subject'].value}}" else subject,
    "type": "{{message.metadata['type'].value}}" if "{{message.metadata['type'].value}}" else type,
    "source": "{{message.metadata['source'].value}}" if "{{message.metadata['source'].value}}" else source,
    "time": "{{message.metadata['time'].value}}" if "{{message.metadata['time'].value}}" else datetime.utcnow().isoformat(),
    "id": str(uuid.uuid4())
}
{% for attrname in message.metadata -%}
{%- set attribute = message.metadata[attrname] -%}
{%- if attrname not in ["id", "time", "source", "subject", "type", "dataschema", "datacontenttype"] %}
cloud_event["{{ attrname }}"] = "{{ attribute.value }}" if "{{ attribute.value }}" else {{ attrname }}
{%- endif -%}
{%- endfor %}
{%- endmacro -%}

# Generates a CloudEvent object from JSON as message
{%- macro DeclareCloudNativeCloudEventFromJson(variable, json, message) -%}
{% for attrname in message.metadata -%}
{%- set attribute = message.metadata[attrname] -%}
{%- if attrname not in ["id", "time", "source", "subject", "type", "dataschema", "datacontenttype"] %}
cloud_event["{{ attrname }}"] = "{{ attribute.value }}" if "{{ attribute.value }}" else {{ attrname }}
{%- endif -%}
{%- endfor %}
{%- endmacro -%}

{%- macro DeclareDispatchObjectsArgs( project_name, messagegroups, withType) -%}
{%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("format", "cloudevents" )) -%}
{%- set pascalGroupName = messagegroup.id  | pascal %}
{%- if withType -%}{{ pascalGroupName | namespace_dot(project_name) | pascal }}I{{ pascalGroupName | strip_namespace }}Dispatcher{% endif %} {{ messagegroup.id  | strip_namespace | camel }}_dispatcher
{%- if not loop.last %}, {%- endif -%}
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectField(project_name,messagegroup) %}
{%- set pascalGroupName = messagegroup.id | pascal %}
{{ pascalGroupName | namespace_dot(project_name) | pascal }}I{{ pascalGroupName | strip_namespace }}Dispatcher {{ messagegroup.id | strip_namespace | camel }}_dispatcher
{%- endmacro-%}

{%- macro DeclareDispatchObjectsFields(project_name,messagegroups) %}
{%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("format", "cloudevents" )) -%}
{{ DeclareDispatchObjectField( project_name, messagegroup ) }}
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectConstructor(project_name, class_name, messagegroup, args, body) %}
def __init__(self, {{ args }}, {{ messagegroup.id | strip_namespace | camel }}_dispatcher):
    self.{{ messagegroup.id | strip_namespace | camel }}_dispatcher = {{ messagegroup.id  | strip_namespace | camel }}_dispatcher
    {{ body | indent(4) }}
{%- endmacro -%}

{%- macro DeclareDispatchObjectsConstructor(project_name, class_name, messagegroups, args, body) %}
{%- if messagegroups | exists("format", "cloudevents" ) %}
def __init__(self, {{ args }}, {%- for messagegroup_key, messagegroup in messagegroups.items() -%} {{ messagegroup.id | strip_namespace | camel }}_dispatcher {%- if not loop.last %}, {%- endif -%}{%- endfor -%}):
    {%- for messagegroup_key, messagegroup in messagegroups.items() -%}
    self.{{ messagegroup.id  | strip_namespace | camel }}_dispatcher = {{ messagegroup.id  | strip_namespace | camel }}_dispatcher
    {%- endfor %}
    {{ body | indent(4) }}
{% endif -%}
{%- endmacro -%}

{%- macro DispatchToDispatchObject(project_name, root, cloudEvent, messagegroup, logger) -%}
cloud_event_type = {{ cloudEvent }}['type']
switcher = {
    {%- for id, message in messagegroup.messages.items() -%}
    {% set pascalDefinitionName = message.id | pascal %}
    "{{ message.id }}": lambda: self.{{ messagegroup.id | strip_namespace | camel }}_dispatcher.on_{{ pascalDefinitionName | strip_namespace }}_async({{ cloudEvent }},
    {%- if message.schemaurl or message.schema -%}
    {{ ( message.schemaurl if message.schemaurl else message.schema) | schema_type( project_name, root, message.schemaformat) | pascal }}.from_data({{ cloudEvent }}['data'], {{cloudEvent}}['datacontenttype'])
    {%- else -%}
    {{ cloudEvent }}['data']
    {%- endif %})
    {%- if not loop.last %},
    {%- endif %}
    {%- endfor %}
}
func = switcher.get(cloud_event_type, None)
if func:
    await func()
{%- if logger %}
else:
    {{ logger }}.error(f"Unsupported CloudEvent type {cloud_event_type}")
{%- endif %}
{%- endmacro -%}

{%- macro DispatchToDispatchObjects(project_name, root, cloudEvent, messagegroups, logger) -%}
{%- if messagegroups | exists("format", "cloudevents" ) -%}
cloud_event_type = {{ cloudEvent }}['type']
switcher = {
    {%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("format", "cloudevents" )) -%}
    {%- for id, message in messagegroup.messages.items() -%}
    {% set pascalDefinitionName = message.id | pascal %}
    "{{ message.id }}": lambda: self.{{ messagegroup.id  | strip_namespace | camel }}_dispatcher.on_{{ pascalDefinitionName | strip_namespace }}_async({{ cloudEvent }},
    {%- if message.schemaurl or message.schema -%}
    {{ ( message.schemaurl if message.schemaurl else message.schema) | schema_type( project_name, root, message.schemaformat) | pascal }}.from_data({{ cloudEvent }}['data'], {{cloudEvent}}['datacontenttype'])
    {%- else -%}
    {{ cloudEvent }}['data']
    {%- endif %})
    {%- if not loop.last %},
    {%- endif %}
    {%- endfor %}
    {%- endfor %}
}
func = switcher.get(cloud_event_type, None)
if func:
    await func()
{%- if logger %}
else:
    {{ logger }}.error(f"Unsupported CloudEvent type {cloud_event_type}")
{%- endif %}
{%- endif -%}
{%- endmacro -%}

{%- macro DeclareDispatchInterfaces(project_name, root, use_azure_messaging=False) -%}
{%- set messagegroups = root.messagegroups -%}
{%- if messagegroups | exists("format", "cloudevents" ) %}
{%- set function_name = project_name | pascal | strip_dots -%}
import asyncio
{%- if use_azure_messaging %}
from azure.eventhub import EventData
{%- else %}
from cloudevents.sdk.event import v1 as CloudEvent
{%- endif %}
{% for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("format", "cloudevents" )) -%}
{%- set pascalGroupName = messagegroup.id  | pascal %}
class I{{ pascalGroupName | strip_namespace }}Dispatcher:
    {%- for id, message in messagegroup.messages.items() if (message | exists( "format", "cloudevents" )) -%}
    {%- set pascalDefinitionName = message.id | strip_namespace | pascal %}
    {%- if message.schemaurl or message.schema -%}
    {%- set dataType = (message.schemaurl if message.schemaurl else message.schema) | schema_type( project_name, root, message.schemaformat) %}
    {%- else -%}
    {%- set dataType = "object" %}
    {%- endif %}
    async def on_{{ pascalDefinitionName | strip_namespace }}_async(self, cloud_event: CloudEvent, data: {{ dataType }} = None):
        pass
    {%- endfor %}
{% endfor %}
{%- endif -%}
{%- endmacro -%}
