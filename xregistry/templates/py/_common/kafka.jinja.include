# kafka.jinja.include

# Kafka macros

{%- macro KafkaHeaders() -%}
from confluent_kafka import Producer, Consumer, KafkaError, Message
{%- endmacro -%}

{%- macro EmitArguments(props) -%}
{%- for propname, prop in props.items() %}
{%- if prop.type == "uritemplate" -%}
   {%- for placeholder in prop.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
   , {{ placeholder }}
   {%- endfor -%}
{%- elif prop.value is not defined -%}
   , {{ propname }}=None
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}

# Generates a list of arguments for "send" methods that correspond to placeholders in uritemplates
{%- macro DeclareUriTemplateArguments(message) -%}
{%- if message.message["header"] -%}{{ EmitArguments(message.message["header"]) }}{%- endif -%}
{%- if message.message["footer"] -%}{{ EmitArguments(message.message["footer"]) }}{%- endif -%}
{%- if message.message["message-annotations"] -%}{{ EmitArguments(message.message["message-annotations"]) }}{%- endif -%}
{%- if message.message["delivery-annotations"] -%}{{ EmitArguments(message.message["delivery-annotations"]) }}{%- endif -%}
{%- if message.message["properties"] -%}{{ EmitArguments(message.message["properties"]) }}{%- endif -%}
{%- if message.message["application-properties"] -%}{{ EmitArguments(message.message["application-properties"]) }}{%- endif -%}
{%- endmacro %}

# Helper macro for assigning properties
{%- macro AssignProps(target, props, as_dict = False) -%}
{%- for propname, prop in props.items() -%}
{%- if as_dict %}
["{{ propname }}"] = {% else %}
{{ target }}.{{ propname }} = {% endif -%}
{%- if prop.value -%}
   {%- if prop.type in ["integer", "number", "boolean"] -%}
      {{ prop.value }}
   {%- elif prop.type == "uri" or prop.type == "uritemplate" -%}
      f"{{ prop.value }}"
   {%- else -%}
      "{{ prop.value }}"
   {%- endif -%}
{%- else -%}
   {{ propname }}
{%- endif -%},
{%- endfor -%}
{%- endmacro -%}

# Generates Kafka message objects from kafkaDefinition as message
{%- macro DeclareMessage(variable, message) -%}
{%- set header = message.message["header"] %}
{%- set footer = message.message["footer"] %}
{%- set messageAnnotations = message.message["message-annotations"] %}
{%- set deliveryAnnotations = message.message["delivery-annotations"] %}
{%- set properties = message.message["properties"] %}
{%- set applicationProperties = message.message["application-properties"] %}
message = Producer()
{%- if header %}
{{- AssignProps("message.headers", header, True) }}
{%- endif %}
{%- if footer %}
{{- AssignProps("message.headers", footer, True) }}
{%- endif %}
{%- if messageAnnotations %}
{{- AssignProps("message.headers", messageAnnotations, True) }}
{%- endif %}
{%- if deliveryAnnotations %}
{{- AssignProps("message.headers", deliveryAnnotations, True) }}
{%- endif %}
{%- if properties %}
{{- AssignProps("message.headers", properties, True) }}
{%- endif %}
{%- if applicationProperties %}
{{- AssignProps("message.headers", applicationProperties, True) }}
{%- endif %}
{%- endmacro -%}

{%- macro DeclareDispatchObjectsArgs(project_name, messagegroups, withType) -%}
{%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("binding", "kafka" )) -%}
{%- set pascalGroupName = messagegroup.id  | pascal %}
{%- if withType -%}{{ pascalGroupName | namespace_dot(project_name) | pascal }}I{{ pascalGroupName | strip_namespace }}Dispatcher{% endif %} {{ messagegroup.id  | strip_namespace | camel }}_kafka_dispatcher
{%- if not loop.last %}, {%- endif -%}
{%- endfor -%}
{%- endmacro-%}

{%- macro DeclareDispatchObjectField(project_name,messagegroup) %}
{%- set handlerName=(messagegroup.id | strip_namespace | camel)+"_kafka_dispatcher" -%}
{%- set handlerType=(messagegroup.id  | namespace_dot(project_name) | pascal)+"I"+(messagegroup.id | strip_namespace | pascal)+"Dispatcher" %}
{{ handlerType }} {{ handlerName }}
{%- endmacro -%}

{%- macro DeclareDispatchObjectsFields(project_name,messagegroups) %}
{%- for messagegroup_key, messagegroup in messagegroups.items() if messagegroup | exists("binding", "kafka" ) %}
{{ DeclareDispatchObjectField( project_name, messagegroup ) }}
{%- endfor %}
{%- endmacro -%}

{%- macro DeclareDispatchObjectConstructor(project_name, class_name, messagegroup, args, body) %}
def __init__(self, {{ args }}, {{ messagegroup.id | strip_namespace | camel }}_kafka_dispatcher):
    self.{{ messagegroup.id | strip_namespace | camel }}_kafka_dispatcher = {{ messagegroup.id | strip_namespace | camel }}_kafka_dispatcher
    {{ body | indent(4) }}
{%- endmacro -%}

{%- macro DeclareDispatchObjectsConstructor(project_name, class_name, messagegroups, args, body) %}
{%- if messagegroups | exists("binding", "kafka" ) %}
def __init__(self, {{ args }}, {%- for messagegroup_key, messagegroup in messagegroups.items() if messagegroup | exists("binding", "kafka" ) -%} {{ messagegroup.id | strip_namespace | camel }}_kafka_dispatcher {%- if not loop.last %}, {%- endif -%}{%- endfor -%}):
    {%- for messagegroup_key, messagegroup in messagegroups.items() if messagegroup | exists("binding", "kafka" ) -%}
    self.{{ messagegroup.id  | strip_namespace | camel }}_kafka_dispatcher = {{ messagegroup.id  | strip_namespace | camel }}_kafka_dispatcher
    {%- endfor %}
    {{ body | indent(4) }}
{%- endif -%}
{%- endmacro -%}

{%- macro DispatchToDispatchObject(project_name, root, message, messagegroup, logger) -%}
message_subject = {{ message }}.topic()
switcher = {
    {%- for id, message in messagegroup.messages.items() if (message | exists("binding", "kafka" )) -%}
    {%- set pascalDefinitionName = message.id | pascal %}
    "{{ message.id }}": lambda: self.{{ messagegroup.id | strip_namespace | camel }}_kafka_dispatcher.on_{{ pascalDefinitionName | strip_namespace }}_async({{ message }},
    {%- if message.schemaurl or message.schema -%}
    {{ ( message.schemaurl if message.schemaurl else message.schema) | schema_type( project_name, root, message.schemaformat) | pascal }}.from_data({{ message }}.value(), {{ message }}.headers.get('content-type'))
    {%- else -%}
    {{ message }}.value()
    {%- endif %})
    {%- if not loop.last %},
    {%- endif %}
    {%- endfor %}
}
func = switcher.get(message_subject, None)
if func:
    await func()
{%- if logger %}
else:
    {{ logger }}.error(f"Unsupported CloudEvent type {cloud_event_type}")
{%- endif %}
{%- endmacro -%}

{%- macro DispatchToDispatchObjects(project_name, root, message, messagegroups, logger) -%}
{%- if messagegroups | exists("binding", "kafka" ) %}
message_subject = {{ message }}.topic()
switcher = {
    {%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("binding", "kafka" )) -%}
    {%- for id, message in messagegroup.messages.items() if (message | exists("binding", "kafka" )) -%}
    {%- set pascalDefinitionName = message.id | pascal %}
    "{{ message.id }}": lambda: self.{{ messagegroup.id  | strip_namespace | camel }}_kafka_dispatcher.on_{{ pascalDefinitionName | strip_namespace }}_async({{ message }},
    {%- if message.schemaurl or message.schema -%}
    {{ ( message.schemaurl if message.schemaurl else message.schema) | schema_type( project_name, root, message.schemaformat) | pascal }}.from_data({{ message }}.value(), {{ message }}.headers.get('content-type'))
    {%- else -%}
    {{ message }}.value()
    {%- endif %})
    {%- if not loop.last %},
    {%- endif %}
    {%- endfor %}
    {%- endfor %}
}
func = switcher.get(message_subject, None)
if func:
    await func()
{%- if logger %}
else:
    {{ logger }}.error(f"Unsupported CloudEvent type {cloud_event_type}")
{%- endif %}
{%- endif -%}
{%- endmacro -%}

{%- macro DeclareDispatchInterfaces(project_name, root) -%}
{%- set messagegroups = root.messagegroups -%}
{%- if messagegroups | exists("binding", "kafka" ) %}
{%- set function_name = project_name | pascal | strip_dots %}
import asyncio
from confluent_kafka import Message
{% for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("binding", "kafka" )) -%}
{%- set pascalGroupName = messagegroup.id  | pascal %}
class I{{ pascalGroupName | strip_namespace }}KafkaDispatcher:
    {%- for id, message in messagegroup.messages.items() if (message | exists("binding", "kafka" )) -%}
    {%- set pascalDefinitionName = message.id | strip_namespace | pascal %}
    {%- if message.schemaurl or message.schema -%}
    {%- set dataType = (message.schemaurl if message.schemaurl else message.schema) | schema_type( project_name, root, message.schemaformat) %}
    {%- else -%}
    {%- set dataType = "object" %}
    {%- endif %}
    {%- if message.description %}
    # {{ message.description }}
    {%- endif %}
    async def on_{{ pascalDefinitionName | strip_namespace }}_async(self, message: Message, data: {{ dataType }} = None):
        pass
    {%- endfor %}
{% endfor %}
{%- endif -%}
{%- endmacro -%}

{%- macro CloudEventsUsings() -%}
from cloudevents.http import from_http, CloudEvent
{%- endmacro -%}

{%- macro CloudEventsMethods() -%}
KAFKA_CLOUDEVENT_PREFIX = "ce_"

def get_cloud_event_attribute(headers, key):
    return headers.get(KAFKA_CLOUDEVENT_PREFIX + key)

def is_cloud_event(headers):
    return any(key.startswith(KAFKA_CLOUDEVENT_PREFIX) for key in headers)

def cloud_event_from_message(message):
    headers = {key[len(KAFKA_CLOUDEVENT_PREFIX):]: value for key, value in message.headers.items() if key.startswith(KAFKA_CLOUDEVENT_PREFIX)}
    return from_http(message.value(), headers)
{%- endmacro -%}
