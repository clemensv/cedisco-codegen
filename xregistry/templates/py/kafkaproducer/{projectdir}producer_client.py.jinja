{%- import "util.include.jinja" as util -%}

# pylint: disable=unused-import, line-too-long, missing-module-docstring, missing-function-docstring, missing-class-docstring, consider-using-f-string, trailing-whitespace, trailing-newlines
import sys
import json
import uuid
from datetime import datetime
from confluent_kafka import Producer, KafkaException, Message
from cloudevents.kafka import to_binary, to_structured, KafkaMessage
from cloudevents.http import CloudEvent


{%- set messagegroups = root.messagegroups %}
{%- set imports = [] %}
{%- for messagegroup_key in messagegroups.keys() -%}
{%- set messagegroup = messagegroups[messagegroup_key] -%}
{%- for id in messagegroup.messages -%}
{%- set definition = messagegroup.messages[id] %}
{%- set type_name = util.DeclareDataType( '', root, definition ) %}
{%- if type_name != "object" %}
{%- set import_statement = "from " + (type_name | lower) + " import " + type_name | strip_namespace | pascal %}
{%- if import_statement not in imports %}
{%- set _ = imports.append(import_statement) %}
{{ import_statement }}
{%- endif %}
{%- endif %}
{%- endfor %}
{%- endfor %}

{%- for messagegroup_key in messagegroups.keys() -%}
{%- set messagegroup = messagegroups[messagegroup_key] -%}
{%- set parts = messagegroup.id.split('.') -%}
{%- set groupName = parts | join('_') | lower %}

class {{ (groupName.split('.')[-1] + '_event_producer') | pascal }}:
    def __init__(self, bootstrap_servers, topic, content_mode='structured'):
        """ init """
        self.producer = Producer({
            "bootstrap.servers":bootstrap_servers
            }
        )
        self.topic = topic
        self.content_mode = content_mode
    
    def __key_mapper(self, x: CloudEvent) -> str:
        return f'{str(x.get("type"))}:{str(x.get("source"))}{("-"+str(x.get("subject"))) if x.get("subject") else ""}'

    {% for id in messagegroup.messages -%}
    {%- set definition = messagegroup.messages[id] -%}
    {%- set parts = definition.id.split('.') -%}
    {%- set definitionName = parts|join('_')|lower %}
    def send_{{definitionName.split('.')[-1]}}(self, data: 
          {{- util.DeclareDataType( project_name, root, definition ) | strip_namespace -}}
    {%- for attrname in definition.metadata if definition.metadata[attrname].required and attrname not in ["id", "time", "type", "dataschema", "datacontenttype", "specversion"] -%}
    {%- set attribute = definition.metadata[attrname] -%}
        {%- if attribute.type == "uritemplate" -%}
            {%- for placeholder in attribute.value | regex_search('\\{([A-Za-z0-9_]+)\\}') %},_{{ placeholder | snake }}:str{% endfor -%}
        {%- elif attribute.value is not defined -%}
            ,_{{ attrname }}:str
        {%- endif -%}
    {%- endfor -%} 
    {%- for attrname in definition.metadata if not definition.metadata[attrname].required and attrname not in ["id", "time", "type", "dataschema", "datacontenttype", "specversion"] -%}
    {%- set attribute = definition.metadata[attrname] -%}
        {%- if attribute.type == "uritemplate" -%}
            {%- for placeholder in attribute.value | regex_search('\\{([A-Za-z0-9_]+)\\}') %},_{{ placeholder | snake }} : str{% endfor -%}
        {%- elif attribute.value is not defined -%}
            ,_{{ attrname }}:str=''
        {%- endif -%}
    {%- endfor -%} 
    ) -> None:
        """ send_{{definitionName.split('.')[-1]}} """
        attributes = {
        {%- for attrname in definition.metadata -%}
        {%- set attribute = definition.metadata[attrname] %}
            "{{ attrname }}": 
            {%- if attribute.value -%}
            "{{ attribute.value }}"
            {%- if attribute.type == "uritemplate" -%}
                {%- set phs = attribute.value | regex_search('\\{([A-Za-z0-9_]+)\\}') %}
                {%- if phs %}
                .format(
                {%- for placeholder in phs -%}
                    {{ placeholder }} = _{{ placeholder }}
                {%- if not loop.last -%},{%- endif%}
                {%- endfor %}
                )   
                {%- endif %}        
            {%- endif %}
            {%- else -%}
                {%- if attrname not in ["id", "time", "type", "dataschema", "datacontenttype", "specversion"] -%}
                _{{ attrname }}
                {%- elif attrname == "id" -%}
                str(uuid.uuid4())
                {%- elif attrname == "time" -%}
                str(datetime.now())
                {%- elif attrname == "type" -%}
                "{{ definition.id }}"
                {%- endif -%}                
            {%- endif-%}
            {%- if not loop.last -%},{%- endif%}
        {%- endfor %}
        }
        event = CloudEvent.create(attributes, data)        
        if self.content_mode == "structured":
            message = to_structured(event, data_marshaller=lambda x: x.to_json(), key_mapper=self.__key_mapper)            
            message.headers["content-type"] = "application/cloudevents+json".encode("utf-8")
        else:
            content_type = "application/json"
            message = to_binary(event, data_marshaller=lambda x: x.to_byte_array(content_type), key_mapper=self.__key_mapper)
            message.headers["content-type"] = content_type.encode("utf-8")
        self.producer.produce(self.topic, key=message.key, value=message.value, headers=message.headers)
        self.producer.flush()
{% endfor %}
{% endfor %}
