{%- import "util.include.jinja" as util -%}
{%- set messagegroups = root.messagegroups %}
{%- filter wordwrap(120) %}
# {{ project_name | capitalize }} Event Producer for Azure Event Hubs

This module provides an event producer for sending events to Azure Event Hubs. It supports both plain AMQP messages and CloudEvents.

## Table of Contents
1. [Overview](#overview)
2. [Generated Event Producers](#generated-event-producers)
    - {% for messagegroup_key, messagegroup in messagegroups.items() %}{{ (messagegroup.id | pascal | strip_dots ) + "EventProducer" }}{% if not loop.last %}, {% endif %}
    {% endfor %}

## Overview

This module defines an event producing framework for Azure Event Hubs,
providing the necessary classes and methods to send various types of events.
It includes both plain AMQP messages and CloudEvents, offering a versatile
solution for event-driven applications.

## Generated Event Producers

{% for messagegroup_key, messagegroup in messagegroups.items() %}
{%- set uses_cloudevents_message = (messagegroup | exists( "format", "cloudevents" )) %}
{%- set uses_plain_amqp_message = (messagegroup | exists( "binding", "amqp" )) %}

### {{ (messagegroup.id | pascal | strip_dots) + "EventProducer" }}

`{{ (messagegroup.id | pascal | strip_dots) + "EventProducer" }}` sends events for the {{ messagegroup.id }} message group.

#### Methods:

##### `__init__`:

```python
__init__(self, producer: EventHubProducerClient, content_mode: Literal['structured', 'binary'] = 'structured') -> None
```

Initializes the producer.

Args:
- `producer`: The EventHub producer client.
- `content_mode`: The content mode to use for sending events.

#### Event Sending Methods

{% for id, message in messagegroup.messages.items() if (message | exists("format", "cloudevents") )%}
{%- set data_type = util.DeclareDataType(data_project_name, root, message) %}
##### `send_{{ message.id | dotunderscore | snake }}`

```python
async def send_{{ message.id | dotunderscore | snake }}(self,
    {%- for attrname, attribute in message.metadata.items() if attribute.required and attribute.value is not defined -%}
        _{{ attrname }}: str, 
    {%- endfor %}
    data: {{ data_type | strip_namespace }}, content_type: str = "application/json"
    {%- for attrname, attribute in message.metadata.items() if not attribute.required and attribute.value is not defined -%}
        , _{{ attrname }}: Optional[str] = None
    {%- endfor -%} ) -> None:
```

Sends the `{{ message.id }}` event to the EventHub.

Args:
{%- for attrname, attribute in message.metadata.items() if attribute.required and attribute.value is not defined %}
- `_{{ attrname }}(str)`: {{ attribute.description if attribute.description else "CloudEvents attribute '"+attrname+"'" }}
{%- endfor %}
{%- for attrname, attribute in message.metadata.items() if attribute.type == "uritemplate" %}
    {%- for placeholder in attribute.value | regex_search('\\{([A-Za-z0-9_]+)\\}') %}
- `_{{ placeholder | snake }}(str)`:  Value for placeholder {{ placeholder }} in attribute {{ attrname }}
    {%- endfor %}
{%- endfor %}
- `data({{ data_type | strip_namespace }})`: The event data to be sent.
- `content_type(str)`: The content type that the event data shall be sent with.
{%- for attrname, attribute in message.metadata.items() if not attribute.required and attribute.value is not defined %}
- `_{{ attrname }}(Optional[str])`: {{ attribute.description if attribute.description else "CloudEvents attribute '"+attrname+"'" }}
{%- endfor %}

Example:

```python
async def send_event():
    producer = EventHubProducerClient.from_connection_string("your-connection-string", eventhub_name="your-eventhub-name")
    event_producer = {{ (messagegroup.id | pascal | strip_dots) + "EventProducer" }}(producer)
    data = {{ data_type | strip_namespace }}(...)  # Construct your event data here
    await event_producer.send_{{ message.id | dotunderscore | lower }}(data=data, content_type="application/json")
```

{% endfor %}
{% endfor %}
{%- endfilter %}