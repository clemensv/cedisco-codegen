{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "amqp.jinja.include" as amqp -%}
{%- import "mqtt.jinja.include" as mqtt -%}
{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set uses_http_endpoint = (root | exists( "protocol", "http" )) %}
{%- set uses_amqp_message = (root | exists( "binding", "amqp" )) %}
{%- set uses_amqp_endpoint = (root | exists( "protocol", "amqp" )) %}
{%- set uses_mqtt_message = (root | exists( "binding", "mqtt" )) %}
{%- set uses_mqtt_endpoint = (root | exists( "protocol", "mqtt" )) %}
// this file was generated by a tool 
package {{ class_name | namespace | lower }};

{%- if uses_amqp_message %}
{{ amqp.AmqpImports() }}
{%- endif %}
{%- if uses_mqtt_message %}
{{ mqtt.PahoImports() }}
{%- endif %}
{%- if uses_cloudevents_message %}
import io.cloudevents.CloudEvent;
{%- endif %}
import java.util.concurrent.CompletableFuture;
import java.util.ArrayList;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

{% for messagegroupid, messagegroup in messagegroups.items() -%}
{%- set groupname = messagegroupid  | pascal -%}
{%- set className = (groupname | strip_namespace)+"EventDispatcher" %}
public class {{ className | strip_namespace }}
{
    
    private Logger _logger = LogManager.getLogger({{ className }}.class);
    
    {%- if uses_cloudevents_message %}
    {{ cloudEvents.DeclareDispatchObjectsFields( project_name, messagegroups ) | indent(4) }}
    {{ cloudEvents.DeclareDispatchObjectsConstructor( project_name, className, messagegroups, '', '') | indent(4) }}
    {%- endif %}
    {%- if uses_amqp_message %}
    {{ amqp.DeclareDispatchObjectsFields( project_name, messagegroups ) | indent(4) }}
    {{ amqp.DeclareDispatchObjectsConstructor( project_name, className, messagegroups, '', '') | indent(4) }}
    {%- endif %}
    {%- if uses_mqtt_message %}
    {{ mqtt.DeclareDispatchObjectsFields( project_name, messagegroups ) | indent(4) }}
    {{ mqtt.DeclareDispatchObjectsConstructor( project_name, className, messagegroups, '', '') | indent(4) }}
    {%- endif %}

    {%- if uses_cloudevents_message %}
    public CompletableFuture<Void> dispatchCloudEventAsync(
            CloudEvent cloudEvent)
    {
            {{ cloudEvents.DispatchToDispatchObjects(project_name, root,  "cloudEvent", messagegroups, "_logger" ) | indent(12) }}
    }
    {%- endif %}

    {%- if uses_amqp_message %}
    public CompletableFuture<Void> dispatchMessageAsync(
            Message amqpMessage, MessageContext messageContext)
    {
            {{ amqp.DispatchToDispatchObjects(project_name, root, "amqpMessage", messagegroups, "_logger" ) | indent(12) }}
    }
    {%- endif %}

    {%- if uses_mqtt_message %}
    public CompletableFuture<Void> dispatchMqttMessageV5Async(
            MqttMessageV5 mqttMessage)
    {
            {{ mqtt.DispatchToDispatchObjects(project_name, root, "mqttMessage", messagegroups, "_logger" ) | indent(12) }}
    }

    public CompletableFuture<Void> dispatchMqttMessageV3Async(
            MqttMessageV3 mqttMessage)
    {
            {{ mqtt.DispatchToDispatchObjects(project_name, root, "mqttMessage", messagegroups, "_logger") | indent(12) }}
    }
    {%- endif %}
}
{% endfor %}